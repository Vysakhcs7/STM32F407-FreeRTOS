
Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005278  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005408  08005408  00006408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054dc  080054dc  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  080054dc  080054dc  000064dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054e4  080054e4  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e4  080054e4  000064e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054e8  080054e8  000064e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080054ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          00004b04  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b70  20004b70  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127af  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cd9  00000000  00000000  0001984b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  0001c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd9  00000000  00000000  0001d730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043ce  00000000  00000000  0001e509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012fc6  00000000  00000000  000228d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4be9  00000000  00000000  0003589d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a486  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005330  00000000  00000000  0010a4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  0010f7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053f0 	.word	0x080053f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080053f0 	.word	0x080053f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <Task1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Task1(void *pvParameters)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		printf("%s\n\r",(char *)pvParameters);
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	4802      	ldr	r0, [pc, #8]	@ (8000574 <Task1+0x14>)
 800056c:	f004 f866 	bl	800463c <iprintf>
 8000570:	e7fa      	b.n	8000568 <Task1+0x8>
 8000572:	bf00      	nop
 8000574:	08005408 	.word	0x08005408

08000578 <Task2>:

	}
}

void Task2(void *pvParameters)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		printf("%s\n\r",(char *)pvParameters);
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	4802      	ldr	r0, [pc, #8]	@ (800058c <Task2+0x14>)
 8000584:	f004 f85a 	bl	800463c <iprintf>
 8000588:	e7fa      	b.n	8000580 <Task2+0x8>
 800058a:	bf00      	nop
 800058c:	08005408 	.word	0x08005408

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 faad 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f839 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f8a1 	bl	80006e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  TaskHandle_t task1_handle, task2_handle;
  BaseType_t returnTask1, returnTask2;

  returnTask1 = xTaskCreate(Task1, "Task1", 200, "Hello from Task 1", 1, &task1_handle);
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <main+0x60>)
 80005ac:	22c8      	movs	r2, #200	@ 0xc8
 80005ae:	4911      	ldr	r1, [pc, #68]	@ (80005f4 <main+0x64>)
 80005b0:	4811      	ldr	r0, [pc, #68]	@ (80005f8 <main+0x68>)
 80005b2:	f002 f96d 	bl	8002890 <xTaskCreate>
 80005b6:	60f8      	str	r0, [r7, #12]
  if(returnTask1 != pdPASS)
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d002      	beq.n	80005c4 <main+0x34>
  {
	  printf("Cannot create Task1 \r\n");
 80005be:	480f      	ldr	r0, [pc, #60]	@ (80005fc <main+0x6c>)
 80005c0:	f004 f8a4 	bl	800470c <puts>
  }

  returnTask2 = xTaskCreate(Task2, "Task2", 200, "Hello from Task 2", 2, &task2_handle);
 80005c4:	463b      	mov	r3, r7
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2302      	movs	r3, #2
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <main+0x70>)
 80005ce:	22c8      	movs	r2, #200	@ 0xc8
 80005d0:	490c      	ldr	r1, [pc, #48]	@ (8000604 <main+0x74>)
 80005d2:	480d      	ldr	r0, [pc, #52]	@ (8000608 <main+0x78>)
 80005d4:	f002 f95c 	bl	8002890 <xTaskCreate>
 80005d8:	60b8      	str	r0, [r7, #8]
  if(returnTask2 != pdPASS)
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d002      	beq.n	80005e6 <main+0x56>
  {
	  printf("Cannot create Task2 \r\n");
 80005e0:	480a      	ldr	r0, [pc, #40]	@ (800060c <main+0x7c>)
 80005e2:	f004 f893 	bl	800470c <puts>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  vTaskStartScheduler();
 80005e6:	f002 fa99 	bl	8002b1c <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0x5a>
 80005ee:	bf00      	nop
 80005f0:	08005410 	.word	0x08005410
 80005f4:	08005424 	.word	0x08005424
 80005f8:	08000561 	.word	0x08000561
 80005fc:	0800542c 	.word	0x0800542c
 8000600:	08005444 	.word	0x08005444
 8000604:	08005458 	.word	0x08005458
 8000608:	08000579 	.word	0x08000579
 800060c:	08005460 	.word	0x08005460

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	@ 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 f954 	bl	80048cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	@ (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	@ (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000684:	23a8      	movs	r3, #168	@ 0xa8
 8000686:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fb51 	bl	8000d3c <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 f84c 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2105      	movs	r1, #5
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fdb2 	bl	800122c <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 f835 	bl	800073c <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_GPIO_Init+0x30>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a08      	ldr	r2, [pc, #32]	@ (8000714 <MX_GPIO_Init+0x30>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_GPIO_Init+0x30>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a04      	ldr	r2, [pc, #16]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d101      	bne.n	800072e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800072a:	f000 fa05 	bl	8000b38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40000c00 	.word	0x40000c00

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <Error_Handler+0x8>

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b12      	ldr	r3, [pc, #72]	@ (800079c <HAL_MspInit+0x54>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000756:	4a11      	ldr	r2, [pc, #68]	@ (800079c <HAL_MspInit+0x54>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075c:	6453      	str	r3, [r2, #68]	@ 0x44
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <HAL_MspInit+0x54>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <HAL_MspInit+0x54>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000772:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <HAL_MspInit+0x54>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000778:	6413      	str	r3, [r2, #64]	@ 0x40
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <HAL_MspInit+0x54>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	210f      	movs	r1, #15
 800078a:	f06f 0001 	mvn.w	r0, #1
 800078e:	f000 faab 	bl	8000ce8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	@ 0x38
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4b33      	ldr	r3, [pc, #204]	@ (8000884 <HAL_InitTick+0xe4>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	4a32      	ldr	r2, [pc, #200]	@ (8000884 <HAL_InitTick+0xe4>)
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c0:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <HAL_InitTick+0xe4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	f003 0308 	and.w	r3, r3, #8
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007cc:	f107 0210 	add.w	r2, r7, #16
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 ff34 	bl	8001644 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d103      	bne.n	80007ee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007e6:	f000 ff19 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 80007ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80007ec:	e004      	b.n	80007f8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007ee:	f000 ff15 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 80007f2:	4603      	mov	r3, r0
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007fa:	4a23      	ldr	r2, [pc, #140]	@ (8000888 <HAL_InitTick+0xe8>)
 80007fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000800:	0c9b      	lsrs	r3, r3, #18
 8000802:	3b01      	subs	r3, #1
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000806:	4b21      	ldr	r3, [pc, #132]	@ (800088c <HAL_InitTick+0xec>)
 8000808:	4a21      	ldr	r2, [pc, #132]	@ (8000890 <HAL_InitTick+0xf0>)
 800080a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <HAL_InitTick+0xec>)
 800080e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000812:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000814:	4a1d      	ldr	r2, [pc, #116]	@ (800088c <HAL_InitTick+0xec>)
 8000816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000818:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <HAL_InitTick+0xec>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <HAL_InitTick+0xec>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <HAL_InitTick+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800082c:	4817      	ldr	r0, [pc, #92]	@ (800088c <HAL_InitTick+0xec>)
 800082e:	f000 ff3b 	bl	80016a8 <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000838:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800083c:	2b00      	cmp	r3, #0
 800083e:	d11b      	bne.n	8000878 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000840:	4812      	ldr	r0, [pc, #72]	@ (800088c <HAL_InitTick+0xec>)
 8000842:	f000 ff8b 	bl	800175c <HAL_TIM_Base_Start_IT>
 8000846:	4603      	mov	r3, r0
 8000848:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800084c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000850:	2b00      	cmp	r3, #0
 8000852:	d111      	bne.n	8000878 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000854:	2032      	movs	r0, #50	@ 0x32
 8000856:	f000 fa63 	bl	8000d20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d808      	bhi.n	8000872 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	2032      	movs	r0, #50	@ 0x32
 8000866:	f000 fa3f 	bl	8000ce8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800086a:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <HAL_InitTick+0xf4>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	e002      	b.n	8000878 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000878:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800087c:	4618      	mov	r0, r3
 800087e:	3738      	adds	r7, #56	@ 0x38
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	431bde83 	.word	0x431bde83
 800088c:	20000088 	.word	0x20000088
 8000890:	40000c00 	.word	0x40000c00
 8000894:	20000004 	.word	0x20000004

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <NMI_Handler+0x4>

080008a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <MemManage_Handler+0x4>

080008b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <UsageFault_Handler+0x4>

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
	...

080008d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80008d4:	4802      	ldr	r0, [pc, #8]	@ (80008e0 <TIM5_IRQHandler+0x10>)
 80008d6:	f000 ffb1 	bl	800183c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000088 	.word	0x20000088

080008e4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <ITM_SendChar+0x48>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a0e      	ldr	r2, [pc, #56]	@ (800092c <ITM_SendChar+0x48>)
 80008f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008f8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <ITM_SendChar+0x4c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000930 <ITM_SendChar+0x4c>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000906:	bf00      	nop
 8000908:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0f8      	beq.n	8000908 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000916:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	6013      	str	r3, [r2, #0]
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000edfc 	.word	0xe000edfc
 8000930:	e0000e00 	.word	0xe0000e00

08000934 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read (int file, char *ptr, int len)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	e00a      	b.n	800095c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000946:	f3af 8000 	nop.w
 800094a:	4601      	mov	r1, r0
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	60ba      	str	r2, [r7, #8]
 8000952:	b2ca      	uxtb	r2, r1
 8000954:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	dbf0      	blt.n	8000946 <_read+0x12>
  }

  return len;
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b086      	sub	sp, #24
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e009      	b.n	8000994 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	60ba      	str	r2, [r7, #8]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ffab 	bl	80008e4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbf1      	blt.n	8000980 <_write+0x12>
  }
  return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_close>:

int _close(int file)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ce:	605a      	str	r2, [r3, #4]
  return 0;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_isatty>:

int _isatty(int file)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a18:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <_sbrk+0x5c>)
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <_sbrk+0x60>)
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <_sbrk+0x64>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <_sbrk+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d207      	bcs.n	8000a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a40:	f003 ff92 	bl	8004968 <__errno>
 8000a44:	4603      	mov	r3, r0
 8000a46:	220c      	movs	r2, #12
 8000a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	e009      	b.n	8000a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a56:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <_sbrk+0x64>)
 8000a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a62:	68fb      	ldr	r3, [r7, #12]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20020000 	.word	0x20020000
 8000a70:	00000400 	.word	0x00000400
 8000a74:	200000d0 	.word	0x200000d0
 8000a78:	20004b70 	.word	0x20004b70

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000aa4:	f7ff ffea 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	@ (8000ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8000aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ace:	f003 ff51 	bl	8004974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fd5d 	bl	8000590 <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ae4:	080054ec 	.word	0x080054ec
  ldr r2, =_sbss
 8000ae8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000aec:	20004b70 	.word	0x20004b70

08000af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <HAL_Init+0x40>)
 8000afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b04:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <HAL_Init+0x40>)
 8000b0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_Init+0x40>)
 8000b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f8d8 	bl	8000cd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f7ff fe3c 	bl	80007a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fe0e 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023c00 	.word	0x40023c00

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	200000d4 	.word	0x200000d4

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	@ (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	200000d4 	.word	0x200000d4

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	@ (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	@ (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	@ (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	@ 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	@ 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ff4c 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfa:	f7ff ff61 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000cfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f7ff ffb1 	bl	8000c6c <NVIC_EncodePriority>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff80 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff54 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e267      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d075      	beq.n	8000e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d5a:	4b88      	ldr	r3, [pc, #544]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	d00c      	beq.n	8000d80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d66:	4b85      	ldr	r3, [pc, #532]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d112      	bne.n	8000d98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d72:	4b82      	ldr	r3, [pc, #520]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000d7e:	d10b      	bne.n	8000d98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d80:	4b7e      	ldr	r3, [pc, #504]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d05b      	beq.n	8000e44 <HAL_RCC_OscConfig+0x108>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d157      	bne.n	8000e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e242      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000da0:	d106      	bne.n	8000db0 <HAL_RCC_OscConfig+0x74>
 8000da2:	4b76      	ldr	r3, [pc, #472]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a75      	ldr	r2, [pc, #468]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e01d      	b.n	8000dec <HAL_RCC_OscConfig+0xb0>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000db8:	d10c      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x98>
 8000dba:	4b70      	ldr	r3, [pc, #448]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a6f      	ldr	r2, [pc, #444]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a6c      	ldr	r2, [pc, #432]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	e00b      	b.n	8000dec <HAL_RCC_OscConfig+0xb0>
 8000dd4:	4b69      	ldr	r3, [pc, #420]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a68      	ldr	r2, [pc, #416]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b66      	ldr	r3, [pc, #408]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a65      	ldr	r2, [pc, #404]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000de6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d013      	beq.n	8000e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df4:	f7ff feb4 	bl	8000b60 <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dfc:	f7ff feb0 	bl	8000b60 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b64      	cmp	r3, #100	@ 0x64
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e207      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f0      	beq.n	8000dfc <HAL_RCC_OscConfig+0xc0>
 8000e1a:	e014      	b.n	8000e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fea0 	bl	8000b60 <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e24:	f7ff fe9c 	bl	8000b60 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b64      	cmp	r3, #100	@ 0x64
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e1f3      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e36:	4b51      	ldr	r3, [pc, #324]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f0      	bne.n	8000e24 <HAL_RCC_OscConfig+0xe8>
 8000e42:	e000      	b.n	8000e46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d063      	beq.n	8000f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000e52:	4b4a      	ldr	r3, [pc, #296]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00b      	beq.n	8000e76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e5e:	4b47      	ldr	r3, [pc, #284]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d11c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e6a:	4b44      	ldr	r3, [pc, #272]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d116      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e76:	4b41      	ldr	r3, [pc, #260]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <HAL_RCC_OscConfig+0x152>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d001      	beq.n	8000e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e1c7      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4937      	ldr	r1, [pc, #220]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea2:	e03a      	b.n	8000f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d020      	beq.n	8000eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eac:	4b34      	ldr	r3, [pc, #208]	@ (8000f80 <HAL_RCC_OscConfig+0x244>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb2:	f7ff fe55 	bl	8000b60 <HAL_GetTick>
 8000eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eba:	f7ff fe51 	bl	8000b60 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e1a8      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f0      	beq.n	8000eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed8:	4b28      	ldr	r3, [pc, #160]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4925      	ldr	r1, [pc, #148]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	600b      	str	r3, [r1, #0]
 8000eec:	e015      	b.n	8000f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eee:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <HAL_RCC_OscConfig+0x244>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fe34 	bl	8000b60 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efc:	f7ff fe30 	bl	8000b60 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e187      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f0      	bne.n	8000efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d036      	beq.n	8000f94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d016      	beq.n	8000f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <HAL_RCC_OscConfig+0x248>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f34:	f7ff fe14 	bl	8000b60 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fe10 	bl	8000b60 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e167      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <HAL_RCC_OscConfig+0x240>)
 8000f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0x200>
 8000f5a:	e01b      	b.n	8000f94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <HAL_RCC_OscConfig+0x248>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f62:	f7ff fdfd 	bl	8000b60 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f68:	e00e      	b.n	8000f88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f6a:	f7ff fdf9 	bl	8000b60 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d907      	bls.n	8000f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e150      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	42470000 	.word	0x42470000
 8000f84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f88:	4b88      	ldr	r3, [pc, #544]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8000f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1ea      	bne.n	8000f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 8097 	beq.w	80010d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa6:	4b81      	ldr	r3, [pc, #516]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10f      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b7d      	ldr	r3, [pc, #500]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	4a7c      	ldr	r2, [pc, #496]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc2:	4b7a      	ldr	r3, [pc, #488]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd2:	4b77      	ldr	r3, [pc, #476]	@ (80011b0 <HAL_RCC_OscConfig+0x474>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d118      	bne.n	8001010 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fde:	4b74      	ldr	r3, [pc, #464]	@ (80011b0 <HAL_RCC_OscConfig+0x474>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a73      	ldr	r2, [pc, #460]	@ (80011b0 <HAL_RCC_OscConfig+0x474>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fea:	f7ff fdb9 	bl	8000b60 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff2:	f7ff fdb5 	bl	8000b60 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e10c      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001004:	4b6a      	ldr	r3, [pc, #424]	@ (80011b0 <HAL_RCC_OscConfig+0x474>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d106      	bne.n	8001026 <HAL_RCC_OscConfig+0x2ea>
 8001018:	4b64      	ldr	r3, [pc, #400]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 800101a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800101c:	4a63      	ldr	r2, [pc, #396]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6713      	str	r3, [r2, #112]	@ 0x70
 8001024:	e01c      	b.n	8001060 <HAL_RCC_OscConfig+0x324>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b05      	cmp	r3, #5
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x30c>
 800102e:	4b5f      	ldr	r3, [pc, #380]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8001030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001032:	4a5e      	ldr	r2, [pc, #376]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6713      	str	r3, [r2, #112]	@ 0x70
 800103a:	4b5c      	ldr	r3, [pc, #368]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 800103c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800103e:	4a5b      	ldr	r2, [pc, #364]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6713      	str	r3, [r2, #112]	@ 0x70
 8001046:	e00b      	b.n	8001060 <HAL_RCC_OscConfig+0x324>
 8001048:	4b58      	ldr	r3, [pc, #352]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 800104a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800104c:	4a57      	ldr	r2, [pc, #348]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	6713      	str	r3, [r2, #112]	@ 0x70
 8001054:	4b55      	ldr	r3, [pc, #340]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8001056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001058:	4a54      	ldr	r2, [pc, #336]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 800105a:	f023 0304 	bic.w	r3, r3, #4
 800105e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d015      	beq.n	8001094 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001068:	f7ff fd7a 	bl	8000b60 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800106e:	e00a      	b.n	8001086 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001070:	f7ff fd76 	bl	8000b60 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800107e:	4293      	cmp	r3, r2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e0cb      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001086:	4b49      	ldr	r3, [pc, #292]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8001088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0ee      	beq.n	8001070 <HAL_RCC_OscConfig+0x334>
 8001092:	e014      	b.n	80010be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001094:	f7ff fd64 	bl	8000b60 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109a:	e00a      	b.n	80010b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800109c:	f7ff fd60 	bl	8000b60 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e0b5      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b2:	4b3e      	ldr	r3, [pc, #248]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 80010b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1ee      	bne.n	800109c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d105      	bne.n	80010d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010c4:	4b39      	ldr	r3, [pc, #228]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	4a38      	ldr	r2, [pc, #224]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 80010ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80a1 	beq.w	800121c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010da:	4b34      	ldr	r3, [pc, #208]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d05c      	beq.n	80011a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d141      	bne.n	8001172 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ee:	4b31      	ldr	r3, [pc, #196]	@ (80011b4 <HAL_RCC_OscConfig+0x478>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fd34 	bl	8000b60 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fc:	f7ff fd30 	bl	8000b60 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e087      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800110e:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69da      	ldr	r2, [r3, #28]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001128:	019b      	lsls	r3, r3, #6
 800112a:	431a      	orrs	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001130:	085b      	lsrs	r3, r3, #1
 8001132:	3b01      	subs	r3, #1
 8001134:	041b      	lsls	r3, r3, #16
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800113c:	061b      	lsls	r3, r3, #24
 800113e:	491b      	ldr	r1, [pc, #108]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001144:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <HAL_RCC_OscConfig+0x478>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fd09 	bl	8000b60 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001152:	f7ff fd05 	bl	8000b60 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e05c      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x416>
 8001170:	e054      	b.n	800121c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <HAL_RCC_OscConfig+0x478>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fcf2 	bl	8000b60 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001180:	f7ff fcee 	bl	8000b60 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e045      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_RCC_OscConfig+0x470>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x444>
 800119e:	e03d      	b.n	800121c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d107      	bne.n	80011b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e038      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40007000 	.word	0x40007000
 80011b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <HAL_RCC_OscConfig+0x4ec>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d028      	beq.n	8001218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d121      	bne.n	8001218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011de:	429a      	cmp	r2, r3
 80011e0:	d11a      	bne.n	8001218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80011e8:	4013      	ands	r3, r2
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80011ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d111      	bne.n	8001218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fe:	085b      	lsrs	r3, r3, #1
 8001200:	3b01      	subs	r3, #1
 8001202:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001204:	429a      	cmp	r2, r3
 8001206:	d107      	bne.n	8001218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001212:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0cc      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001240:	4b68      	ldr	r3, [pc, #416]	@ (80013e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d90c      	bls.n	8001268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800124e:	4b65      	ldr	r3, [pc, #404]	@ (80013e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001256:	4b63      	ldr	r3, [pc, #396]	@ (80013e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d001      	beq.n	8001268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0b8      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d020      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001280:	4b59      	ldr	r3, [pc, #356]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	4a58      	ldr	r2, [pc, #352]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800128a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001298:	4b53      	ldr	r3, [pc, #332]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4a52      	ldr	r2, [pc, #328]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a4:	4b50      	ldr	r3, [pc, #320]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	494d      	ldr	r1, [pc, #308]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d044      	beq.n	800134c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d107      	bne.n	80012da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ca:	4b47      	ldr	r3, [pc, #284]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d119      	bne.n	800130a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e07f      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d003      	beq.n	80012ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d107      	bne.n	80012fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ea:	4b3f      	ldr	r3, [pc, #252]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d109      	bne.n	800130a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e06f      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fa:	4b3b      	ldr	r3, [pc, #236]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e067      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800130a:	4b37      	ldr	r3, [pc, #220]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f023 0203 	bic.w	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4934      	ldr	r1, [pc, #208]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001318:	4313      	orrs	r3, r2
 800131a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800131c:	f7ff fc20 	bl	8000b60 <HAL_GetTick>
 8001320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001322:	e00a      	b.n	800133a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001324:	f7ff fc1c 	bl	8000b60 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001332:	4293      	cmp	r3, r2
 8001334:	d901      	bls.n	800133a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e04f      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133a:	4b2b      	ldr	r3, [pc, #172]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 020c 	and.w	r2, r3, #12
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	429a      	cmp	r2, r3
 800134a:	d1eb      	bne.n	8001324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800134c:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <HAL_RCC_ClockConfig+0x1b8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d20c      	bcs.n	8001374 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135a:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <HAL_RCC_ClockConfig+0x1b8>)
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d001      	beq.n	8001374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e032      	b.n	80013da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001380:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	4916      	ldr	r1, [pc, #88]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	4313      	orrs	r3, r2
 8001390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	d009      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	490e      	ldr	r1, [pc, #56]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013b2:	f000 f821 	bl	80013f8 <HAL_RCC_GetSysClockFreq>
 80013b6:	4602      	mov	r2, r0
 80013b8:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	490a      	ldr	r1, [pc, #40]	@ (80013ec <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	5ccb      	ldrb	r3, [r1, r3]
 80013c6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ca:	4a09      	ldr	r2, [pc, #36]	@ (80013f0 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f9e4 	bl	80007a0 <HAL_InitTick>

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00
 80013e8:	40023800 	.word	0x40023800
 80013ec:	08005490 	.word	0x08005490
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013fc:	b094      	sub	sp, #80	@ 0x50
 80013fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001410:	4b79      	ldr	r3, [pc, #484]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b08      	cmp	r3, #8
 800141a:	d00d      	beq.n	8001438 <HAL_RCC_GetSysClockFreq+0x40>
 800141c:	2b08      	cmp	r3, #8
 800141e:	f200 80e1 	bhi.w	80015e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <HAL_RCC_GetSysClockFreq+0x34>
 8001426:	2b04      	cmp	r3, #4
 8001428:	d003      	beq.n	8001432 <HAL_RCC_GetSysClockFreq+0x3a>
 800142a:	e0db      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800142c:	4b73      	ldr	r3, [pc, #460]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x204>)
 800142e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001430:	e0db      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001432:	4b73      	ldr	r3, [pc, #460]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x208>)
 8001434:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001436:	e0d8      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001438:	4b6f      	ldr	r3, [pc, #444]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001440:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001442:	4b6d      	ldr	r3, [pc, #436]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d063      	beq.n	8001516 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800144e:	4b6a      	ldr	r3, [pc, #424]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	099b      	lsrs	r3, r3, #6
 8001454:	2200      	movs	r2, #0
 8001456:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001458:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800145a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800145c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001460:	633b      	str	r3, [r7, #48]	@ 0x30
 8001462:	2300      	movs	r3, #0
 8001464:	637b      	str	r3, [r7, #52]	@ 0x34
 8001466:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800146a:	4622      	mov	r2, r4
 800146c:	462b      	mov	r3, r5
 800146e:	f04f 0000 	mov.w	r0, #0
 8001472:	f04f 0100 	mov.w	r1, #0
 8001476:	0159      	lsls	r1, r3, #5
 8001478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800147c:	0150      	lsls	r0, r2, #5
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4621      	mov	r1, r4
 8001484:	1a51      	subs	r1, r2, r1
 8001486:	6139      	str	r1, [r7, #16]
 8001488:	4629      	mov	r1, r5
 800148a:	eb63 0301 	sbc.w	r3, r3, r1
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800149c:	4659      	mov	r1, fp
 800149e:	018b      	lsls	r3, r1, #6
 80014a0:	4651      	mov	r1, sl
 80014a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014a6:	4651      	mov	r1, sl
 80014a8:	018a      	lsls	r2, r1, #6
 80014aa:	4651      	mov	r1, sl
 80014ac:	ebb2 0801 	subs.w	r8, r2, r1
 80014b0:	4659      	mov	r1, fp
 80014b2:	eb63 0901 	sbc.w	r9, r3, r1
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014ca:	4690      	mov	r8, r2
 80014cc:	4699      	mov	r9, r3
 80014ce:	4623      	mov	r3, r4
 80014d0:	eb18 0303 	adds.w	r3, r8, r3
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	462b      	mov	r3, r5
 80014d8:	eb49 0303 	adc.w	r3, r9, r3
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80014ea:	4629      	mov	r1, r5
 80014ec:	024b      	lsls	r3, r1, #9
 80014ee:	4621      	mov	r1, r4
 80014f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014f4:	4621      	mov	r1, r4
 80014f6:	024a      	lsls	r2, r1, #9
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014fe:	2200      	movs	r2, #0
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001504:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001508:	f7fe feb2 	bl	8000270 <__aeabi_uldivmod>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4613      	mov	r3, r2
 8001512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001514:	e058      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001516:	4b38      	ldr	r3, [pc, #224]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	099b      	lsrs	r3, r3, #6
 800151c:	2200      	movs	r2, #0
 800151e:	4618      	mov	r0, r3
 8001520:	4611      	mov	r1, r2
 8001522:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001526:	623b      	str	r3, [r7, #32]
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
 800152c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001530:	4642      	mov	r2, r8
 8001532:	464b      	mov	r3, r9
 8001534:	f04f 0000 	mov.w	r0, #0
 8001538:	f04f 0100 	mov.w	r1, #0
 800153c:	0159      	lsls	r1, r3, #5
 800153e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001542:	0150      	lsls	r0, r2, #5
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4641      	mov	r1, r8
 800154a:	ebb2 0a01 	subs.w	sl, r2, r1
 800154e:	4649      	mov	r1, r9
 8001550:	eb63 0b01 	sbc.w	fp, r3, r1
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001560:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001564:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001568:	ebb2 040a 	subs.w	r4, r2, sl
 800156c:	eb63 050b 	sbc.w	r5, r3, fp
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	00eb      	lsls	r3, r5, #3
 800157a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800157e:	00e2      	lsls	r2, r4, #3
 8001580:	4614      	mov	r4, r2
 8001582:	461d      	mov	r5, r3
 8001584:	4643      	mov	r3, r8
 8001586:	18e3      	adds	r3, r4, r3
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	464b      	mov	r3, r9
 800158c:	eb45 0303 	adc.w	r3, r5, r3
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800159e:	4629      	mov	r1, r5
 80015a0:	028b      	lsls	r3, r1, #10
 80015a2:	4621      	mov	r1, r4
 80015a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015a8:	4621      	mov	r1, r4
 80015aa:	028a      	lsls	r2, r1, #10
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015b2:	2200      	movs	r2, #0
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	61fa      	str	r2, [r7, #28]
 80015b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015bc:	f7fe fe58 	bl	8000270 <__aeabi_uldivmod>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4613      	mov	r3, r2
 80015c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015c8:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	3301      	adds	r3, #1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80015d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80015da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80015e2:	e002      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015e4:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x204>)
 80015e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80015e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3750      	adds	r7, #80	@ 0x50
 80015f0:	46bd      	mov	sp, r7
 80015f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	00f42400 	.word	0x00f42400
 8001600:	007a1200 	.word	0x007a1200

08001604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001608:	4b03      	ldr	r3, [pc, #12]	@ (8001618 <HAL_RCC_GetHCLKFreq+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000000 	.word	0x20000000

0800161c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001620:	f7ff fff0 	bl	8001604 <HAL_RCC_GetHCLKFreq>
 8001624:	4602      	mov	r2, r0
 8001626:	4b05      	ldr	r3, [pc, #20]	@ (800163c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	0a9b      	lsrs	r3, r3, #10
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	4903      	ldr	r1, [pc, #12]	@ (8001640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001632:	5ccb      	ldrb	r3, [r1, r3]
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001638:	4618      	mov	r0, r3
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	080054a0 	.word	0x080054a0

08001644 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	220f      	movs	r2, #15
 8001652:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0203 	and.w	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <HAL_RCC_GetClockConfig+0x5c>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <HAL_RCC_GetClockConfig+0x5c>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	08db      	lsrs	r3, r3, #3
 800167e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001686:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <HAL_RCC_GetClockConfig+0x60>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0207 	and.w	r2, r3, #7
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	601a      	str	r2, [r3, #0]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40023c00 	.word	0x40023c00

080016a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e041      	b.n	800173e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d106      	bne.n	80016d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f839 	bl	8001746 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3304      	adds	r3, #4
 80016e4:	4619      	mov	r1, r3
 80016e6:	4610      	mov	r0, r2
 80016e8:	f000 f9c0 	bl	8001a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d001      	beq.n	8001774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e04e      	b.n	8001812 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a23      	ldr	r2, [pc, #140]	@ (8001820 <HAL_TIM_Base_Start_IT+0xc4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d022      	beq.n	80017dc <HAL_TIM_Base_Start_IT+0x80>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800179e:	d01d      	beq.n	80017dc <HAL_TIM_Base_Start_IT+0x80>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001824 <HAL_TIM_Base_Start_IT+0xc8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d018      	beq.n	80017dc <HAL_TIM_Base_Start_IT+0x80>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001828 <HAL_TIM_Base_Start_IT+0xcc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d013      	beq.n	80017dc <HAL_TIM_Base_Start_IT+0x80>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a1c      	ldr	r2, [pc, #112]	@ (800182c <HAL_TIM_Base_Start_IT+0xd0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00e      	beq.n	80017dc <HAL_TIM_Base_Start_IT+0x80>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001830 <HAL_TIM_Base_Start_IT+0xd4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d009      	beq.n	80017dc <HAL_TIM_Base_Start_IT+0x80>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a19      	ldr	r2, [pc, #100]	@ (8001834 <HAL_TIM_Base_Start_IT+0xd8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d004      	beq.n	80017dc <HAL_TIM_Base_Start_IT+0x80>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a18      	ldr	r2, [pc, #96]	@ (8001838 <HAL_TIM_Base_Start_IT+0xdc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d111      	bne.n	8001800 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d010      	beq.n	8001810 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 0201 	orr.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017fe:	e007      	b.n	8001810 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40010000 	.word	0x40010000
 8001824:	40000400 	.word	0x40000400
 8001828:	40000800 	.word	0x40000800
 800182c:	40000c00 	.word	0x40000c00
 8001830:	40010400 	.word	0x40010400
 8001834:	40014000 	.word	0x40014000
 8001838:	40001800 	.word	0x40001800

0800183c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d020      	beq.n	80018a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01b      	beq.n	80018a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 0202 	mvn.w	r2, #2
 8001870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f8d2 	bl	8001a30 <HAL_TIM_IC_CaptureCallback>
 800188c:	e005      	b.n	800189a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f8c4 	bl	8001a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f8d5 	bl	8001a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d020      	beq.n	80018ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d01b      	beq.n	80018ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f06f 0204 	mvn.w	r2, #4
 80018bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2202      	movs	r2, #2
 80018c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f8ac 	bl	8001a30 <HAL_TIM_IC_CaptureCallback>
 80018d8:	e005      	b.n	80018e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f89e 	bl	8001a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f8af 	bl	8001a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d020      	beq.n	8001938 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01b      	beq.n	8001938 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f06f 0208 	mvn.w	r2, #8
 8001908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2204      	movs	r2, #4
 800190e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f886 	bl	8001a30 <HAL_TIM_IC_CaptureCallback>
 8001924:	e005      	b.n	8001932 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f878 	bl	8001a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f889 	bl	8001a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	2b00      	cmp	r3, #0
 8001940:	d020      	beq.n	8001984 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b00      	cmp	r3, #0
 800194a:	d01b      	beq.n	8001984 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f06f 0210 	mvn.w	r2, #16
 8001954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2208      	movs	r2, #8
 800195a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f860 	bl	8001a30 <HAL_TIM_IC_CaptureCallback>
 8001970:	e005      	b.n	800197e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f852 	bl	8001a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f863 	bl	8001a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00c      	beq.n	80019a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d007      	beq.n	80019a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f06f 0201 	mvn.w	r2, #1
 80019a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7fe feb8 	bl	8000718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00c      	beq.n	80019cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d007      	beq.n	80019cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80019c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f906 	bl	8001bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00c      	beq.n	80019f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d007      	beq.n	80019f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80019e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f834 	bl	8001a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00c      	beq.n	8001a14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0220 	mvn.w	r2, #32
 8001a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f8d8 	bl	8001bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a46      	ldr	r2, [pc, #280]	@ (8001b98 <TIM_Base_SetConfig+0x12c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d013      	beq.n	8001aac <TIM_Base_SetConfig+0x40>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a8a:	d00f      	beq.n	8001aac <TIM_Base_SetConfig+0x40>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a43      	ldr	r2, [pc, #268]	@ (8001b9c <TIM_Base_SetConfig+0x130>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d00b      	beq.n	8001aac <TIM_Base_SetConfig+0x40>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a42      	ldr	r2, [pc, #264]	@ (8001ba0 <TIM_Base_SetConfig+0x134>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d007      	beq.n	8001aac <TIM_Base_SetConfig+0x40>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a41      	ldr	r2, [pc, #260]	@ (8001ba4 <TIM_Base_SetConfig+0x138>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d003      	beq.n	8001aac <TIM_Base_SetConfig+0x40>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a40      	ldr	r2, [pc, #256]	@ (8001ba8 <TIM_Base_SetConfig+0x13c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d108      	bne.n	8001abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a35      	ldr	r2, [pc, #212]	@ (8001b98 <TIM_Base_SetConfig+0x12c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02b      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001acc:	d027      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a32      	ldr	r2, [pc, #200]	@ (8001b9c <TIM_Base_SetConfig+0x130>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d023      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a31      	ldr	r2, [pc, #196]	@ (8001ba0 <TIM_Base_SetConfig+0x134>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01f      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a30      	ldr	r2, [pc, #192]	@ (8001ba4 <TIM_Base_SetConfig+0x138>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01b      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a2f      	ldr	r2, [pc, #188]	@ (8001ba8 <TIM_Base_SetConfig+0x13c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d017      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a2e      	ldr	r2, [pc, #184]	@ (8001bac <TIM_Base_SetConfig+0x140>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb0 <TIM_Base_SetConfig+0x144>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00f      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb4 <TIM_Base_SetConfig+0x148>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d00b      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb8 <TIM_Base_SetConfig+0x14c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d007      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a2a      	ldr	r2, [pc, #168]	@ (8001bbc <TIM_Base_SetConfig+0x150>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d003      	beq.n	8001b1e <TIM_Base_SetConfig+0xb2>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a29      	ldr	r2, [pc, #164]	@ (8001bc0 <TIM_Base_SetConfig+0x154>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d108      	bne.n	8001b30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a10      	ldr	r2, [pc, #64]	@ (8001b98 <TIM_Base_SetConfig+0x12c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <TIM_Base_SetConfig+0xf8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ba8 <TIM_Base_SetConfig+0x13c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d103      	bne.n	8001b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d105      	bne.n	8001b8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	f023 0201 	bic.w	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	611a      	str	r2, [r3, #16]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	40000800 	.word	0x40000800
 8001ba4:	40000c00 	.word	0x40000c00
 8001ba8:	40010400 	.word	0x40010400
 8001bac:	40014000 	.word	0x40014000
 8001bb0:	40014400 	.word	0x40014400
 8001bb4:	40014800 	.word	0x40014800
 8001bb8:	40001800 	.word	0x40001800
 8001bbc:	40001c00 	.word	0x40001c00
 8001bc0:	40002000 	.word	0x40002000

08001bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <SysTick_Handler+0x1c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001bf4:	f001 fbe0 	bl	80033b8 <xTaskGetSchedulerState>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d001      	beq.n	8001c02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001bfe:	f002 f9db 	bl	8003fb8 <xPortSysTickHandler>
  }
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <vApplicationGetIdleTaskMemory+0x2c>)
 8001c1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	4a06      	ldr	r2, [pc, #24]	@ (8001c3c <vApplicationGetIdleTaskMemory+0x30>)
 8001c22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2280      	movs	r2, #128	@ 0x80
 8001c28:	601a      	str	r2, [r3, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	200000d8 	.word	0x200000d8
 8001c3c:	20000134 	.word	0x20000134

08001c40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4a07      	ldr	r2, [pc, #28]	@ (8001c6c <vApplicationGetTimerTaskMemory+0x2c>)
 8001c50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4a06      	ldr	r2, [pc, #24]	@ (8001c70 <vApplicationGetTimerTaskMemory+0x30>)
 8001c56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c5e:	601a      	str	r2, [r3, #0]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	20000334 	.word	0x20000334
 8001c70:	20000390 	.word	0x20000390

08001c74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f103 0208 	add.w	r2, r3, #8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f103 0208 	add.w	r2, r3, #8
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f103 0208 	add.w	r2, r3, #8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	601a      	str	r2, [r3, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d103      	bne.n	8001d36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	e00c      	b.n	8001d50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3308      	adds	r3, #8
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e002      	b.n	8001d44 <vListInsert+0x2e>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d2f6      	bcs.n	8001d3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	601a      	str	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6892      	ldr	r2, [r2, #8]
 8001d9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6852      	ldr	r2, [r2, #4]
 8001da8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d103      	bne.n	8001dbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	1e5a      	subs	r2, r3, #1
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10b      	bne.n	8001e08 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001e08:	f002 f846 	bl	8003e98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e14:	68f9      	ldr	r1, [r7, #12]
 8001e16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001e18:	fb01 f303 	mul.w	r3, r1, r3
 8001e1c:	441a      	add	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	68f9      	ldr	r1, [r7, #12]
 8001e3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	441a      	add	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	22ff      	movs	r2, #255	@ 0xff
 8001e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	22ff      	movs	r2, #255	@ 0xff
 8001e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d114      	bne.n	8001e88 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d01a      	beq.n	8001e9c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3310      	adds	r3, #16
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 f8e4 	bl	8003038 <xTaskRemoveFromEventList>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d012      	beq.n	8001e9c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e76:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <xQueueGenericReset+0xd0>)
 8001e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	f3bf 8f4f 	dsb	sy
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	e009      	b.n	8001e9c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3310      	adds	r3, #16
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fef1 	bl	8001c74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3324      	adds	r3, #36	@ 0x24
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff feec 	bl	8001c74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e9c:	f002 f82e 	bl	8003efc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001ea0:	2301      	movs	r3, #1
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000ed04 	.word	0xe000ed04

08001eb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08e      	sub	sp, #56	@ 0x38
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ec8:	f383 8811 	msr	BASEPRI, r3
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10b      	bne.n	8001efa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ee6:	f383 8811 	msr	BASEPRI, r3
 8001eea:	f3bf 8f6f 	isb	sy
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	e7fd      	b.n	8001ef6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <xQueueGenericCreateStatic+0x56>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <xQueueGenericCreateStatic+0x5a>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <xQueueGenericCreateStatic+0x5c>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10b      	bne.n	8001f28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f14:	f383 8811 	msr	BASEPRI, r3
 8001f18:	f3bf 8f6f 	isb	sy
 8001f1c:	f3bf 8f4f 	dsb	sy
 8001f20:	623b      	str	r3, [r7, #32]
}
 8001f22:	bf00      	nop
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d102      	bne.n	8001f34 <xQueueGenericCreateStatic+0x84>
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <xQueueGenericCreateStatic+0x88>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <xQueueGenericCreateStatic+0x8a>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10b      	bne.n	8001f56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f42:	f383 8811 	msr	BASEPRI, r3
 8001f46:	f3bf 8f6f 	isb	sy
 8001f4a:	f3bf 8f4f 	dsb	sy
 8001f4e:	61fb      	str	r3, [r7, #28]
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	e7fd      	b.n	8001f52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001f56:	2350      	movs	r3, #80	@ 0x50
 8001f58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b50      	cmp	r3, #80	@ 0x50
 8001f5e:	d00b      	beq.n	8001f78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f64:	f383 8811 	msr	BASEPRI, r3
 8001f68:	f3bf 8f6f 	isb	sy
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	61bb      	str	r3, [r7, #24]
}
 8001f72:	bf00      	nop
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001f78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	4613      	mov	r3, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f805 	bl	8001faa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3730      	adds	r7, #48	@ 0x30
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d103      	bne.n	8001fc6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e002      	b.n	8001fcc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001fd8:	2101      	movs	r1, #1
 8001fda:	69b8      	ldr	r0, [r7, #24]
 8001fdc:	f7ff fefe 	bl	8001ddc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08e      	sub	sp, #56	@ 0x38
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001ffe:	2300      	movs	r3, #0
 8002000:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10b      	bne.n	8002024 <xQueueGenericSend+0x34>
	__asm volatile
 800200c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002010:	f383 8811 	msr	BASEPRI, r3
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	f3bf 8f4f 	dsb	sy
 800201c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800201e:	bf00      	nop
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d103      	bne.n	8002032 <xQueueGenericSend+0x42>
 800202a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <xQueueGenericSend+0x46>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <xQueueGenericSend+0x48>
 8002036:	2300      	movs	r3, #0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10b      	bne.n	8002054 <xQueueGenericSend+0x64>
	__asm volatile
 800203c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002040:	f383 8811 	msr	BASEPRI, r3
 8002044:	f3bf 8f6f 	isb	sy
 8002048:	f3bf 8f4f 	dsb	sy
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d103      	bne.n	8002062 <xQueueGenericSend+0x72>
 800205a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800205c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <xQueueGenericSend+0x76>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <xQueueGenericSend+0x78>
 8002066:	2300      	movs	r3, #0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10b      	bne.n	8002084 <xQueueGenericSend+0x94>
	__asm volatile
 800206c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002070:	f383 8811 	msr	BASEPRI, r3
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	623b      	str	r3, [r7, #32]
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002084:	f001 f998 	bl	80033b8 <xTaskGetSchedulerState>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <xQueueGenericSend+0xa4>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <xQueueGenericSend+0xa8>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <xQueueGenericSend+0xaa>
 8002098:	2300      	movs	r3, #0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10b      	bne.n	80020b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800209e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a2:	f383 8811 	msr	BASEPRI, r3
 80020a6:	f3bf 8f6f 	isb	sy
 80020aa:	f3bf 8f4f 	dsb	sy
 80020ae:	61fb      	str	r3, [r7, #28]
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	e7fd      	b.n	80020b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020b6:	f001 feef 	bl	8003e98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d302      	bcc.n	80020cc <xQueueGenericSend+0xdc>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d129      	bne.n	8002120 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020d2:	f000 fa0f 	bl	80024f4 <prvCopyDataToQueue>
 80020d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d010      	beq.n	8002102 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e2:	3324      	adds	r3, #36	@ 0x24
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 ffa7 	bl	8003038 <xTaskRemoveFromEventList>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80020f0:	4b3f      	ldr	r3, [pc, #252]	@ (80021f0 <xQueueGenericSend+0x200>)
 80020f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	f3bf 8f6f 	isb	sy
 8002100:	e00a      	b.n	8002118 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002108:	4b39      	ldr	r3, [pc, #228]	@ (80021f0 <xQueueGenericSend+0x200>)
 800210a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	f3bf 8f4f 	dsb	sy
 8002114:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002118:	f001 fef0 	bl	8003efc <vPortExitCritical>
				return pdPASS;
 800211c:	2301      	movs	r3, #1
 800211e:	e063      	b.n	80021e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002126:	f001 fee9 	bl	8003efc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800212a:	2300      	movs	r3, #0
 800212c:	e05c      	b.n	80021e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800212e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002130:	2b00      	cmp	r3, #0
 8002132:	d106      	bne.n	8002142 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4618      	mov	r0, r3
 800213a:	f000 ffe1 	bl	8003100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800213e:	2301      	movs	r3, #1
 8002140:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002142:	f001 fedb 	bl	8003efc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002146:	f000 fd51 	bl	8002bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800214a:	f001 fea5 	bl	8003e98 <vPortEnterCritical>
 800214e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002150:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002154:	b25b      	sxtb	r3, r3
 8002156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215a:	d103      	bne.n	8002164 <xQueueGenericSend+0x174>
 800215c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002166:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800216a:	b25b      	sxtb	r3, r3
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d103      	bne.n	800217a <xQueueGenericSend+0x18a>
 8002172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800217a:	f001 febf 	bl	8003efc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800217e:	1d3a      	adds	r2, r7, #4
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f000 ffd0 	bl	800312c <xTaskCheckForTimeOut>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d124      	bne.n	80021dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002192:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002194:	f000 faa6 	bl	80026e4 <prvIsQueueFull>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d018      	beq.n	80021d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800219e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a0:	3310      	adds	r3, #16
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 fef4 	bl	8002f94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80021ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021ae:	f000 fa31 	bl	8002614 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80021b2:	f000 fd29 	bl	8002c08 <xTaskResumeAll>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f47f af7c 	bne.w	80020b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <xQueueGenericSend+0x200>)
 80021c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	f3bf 8f6f 	isb	sy
 80021ce:	e772      	b.n	80020b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80021d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021d2:	f000 fa1f 	bl	8002614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021d6:	f000 fd17 	bl	8002c08 <xTaskResumeAll>
 80021da:	e76c      	b.n	80020b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80021dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021de:	f000 fa19 	bl	8002614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021e2:	f000 fd11 	bl	8002c08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80021e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3738      	adds	r7, #56	@ 0x38
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	e000ed04 	.word	0xe000ed04

080021f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b090      	sub	sp, #64	@ 0x40
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10b      	bne.n	8002224 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800220c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d103      	bne.n	8002232 <xQueueGenericSendFromISR+0x3e>
 800222a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <xQueueGenericSendFromISR+0x42>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <xQueueGenericSendFromISR+0x44>
 8002236:	2300      	movs	r3, #0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10b      	bne.n	8002254 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800223c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002240:	f383 8811 	msr	BASEPRI, r3
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	f3bf 8f4f 	dsb	sy
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800224e:	bf00      	nop
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d103      	bne.n	8002262 <xQueueGenericSendFromISR+0x6e>
 800225a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800225c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <xQueueGenericSendFromISR+0x72>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <xQueueGenericSendFromISR+0x74>
 8002266:	2300      	movs	r3, #0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800226c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	623b      	str	r3, [r7, #32]
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002284:	f001 fee8 	bl	8004058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002288:	f3ef 8211 	mrs	r2, BASEPRI
 800228c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002290:	f383 8811 	msr	BASEPRI, r3
 8002294:	f3bf 8f6f 	isb	sy
 8002298:	f3bf 8f4f 	dsb	sy
 800229c:	61fa      	str	r2, [r7, #28]
 800229e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80022a0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80022a2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d302      	bcc.n	80022b6 <xQueueGenericSendFromISR+0xc2>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d12f      	bne.n	8002316 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80022b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80022cc:	f000 f912 	bl	80024f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80022d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d112      	bne.n	8002300 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d016      	beq.n	8002310 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e4:	3324      	adds	r3, #36	@ 0x24
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fea6 	bl	8003038 <xTaskRemoveFromEventList>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00e      	beq.n	8002310 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00b      	beq.n	8002310 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e007      	b.n	8002310 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002300:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002304:	3301      	adds	r3, #1
 8002306:	b2db      	uxtb	r3, r3
 8002308:	b25a      	sxtb	r2, r3
 800230a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800230c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002310:	2301      	movs	r3, #1
 8002312:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002314:	e001      	b.n	800231a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002316:	2300      	movs	r3, #0
 8002318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800231a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002324:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002328:	4618      	mov	r0, r3
 800232a:	3740      	adds	r7, #64	@ 0x40
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08c      	sub	sp, #48	@ 0x30
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800233c:	2300      	movs	r3, #0
 800233e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10b      	bne.n	8002362 <xQueueReceive+0x32>
	__asm volatile
 800234a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800234e:	f383 8811 	msr	BASEPRI, r3
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	623b      	str	r3, [r7, #32]
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	e7fd      	b.n	800235e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d103      	bne.n	8002370 <xQueueReceive+0x40>
 8002368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <xQueueReceive+0x44>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <xQueueReceive+0x46>
 8002374:	2300      	movs	r3, #0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10b      	bne.n	8002392 <xQueueReceive+0x62>
	__asm volatile
 800237a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800237e:	f383 8811 	msr	BASEPRI, r3
 8002382:	f3bf 8f6f 	isb	sy
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	61fb      	str	r3, [r7, #28]
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	e7fd      	b.n	800238e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002392:	f001 f811 	bl	80033b8 <xTaskGetSchedulerState>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <xQueueReceive+0x72>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <xQueueReceive+0x76>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <xQueueReceive+0x78>
 80023a6:	2300      	movs	r3, #0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10b      	bne.n	80023c4 <xQueueReceive+0x94>
	__asm volatile
 80023ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b0:	f383 8811 	msr	BASEPRI, r3
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	61bb      	str	r3, [r7, #24]
}
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80023c4:	f001 fd68 	bl	8003e98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01f      	beq.n	8002414 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023d8:	f000 f8f6 	bl	80025c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00f      	beq.n	800240c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ee:	3310      	adds	r3, #16
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fe21 	bl	8003038 <xTaskRemoveFromEventList>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80023fc:	4b3c      	ldr	r3, [pc, #240]	@ (80024f0 <xQueueReceive+0x1c0>)
 80023fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800240c:	f001 fd76 	bl	8003efc <vPortExitCritical>
				return pdPASS;
 8002410:	2301      	movs	r3, #1
 8002412:	e069      	b.n	80024e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800241a:	f001 fd6f 	bl	8003efc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800241e:	2300      	movs	r3, #0
 8002420:	e062      	b.n	80024e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d106      	bne.n	8002436 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002428:	f107 0310 	add.w	r3, r7, #16
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fe67 	bl	8003100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002432:	2301      	movs	r3, #1
 8002434:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002436:	f001 fd61 	bl	8003efc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800243a:	f000 fbd7 	bl	8002bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800243e:	f001 fd2b 	bl	8003e98 <vPortEnterCritical>
 8002442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002444:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002448:	b25b      	sxtb	r3, r3
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244e:	d103      	bne.n	8002458 <xQueueReceive+0x128>
 8002450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800245e:	b25b      	sxtb	r3, r3
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d103      	bne.n	800246e <xQueueReceive+0x13e>
 8002466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800246e:	f001 fd45 	bl	8003efc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002472:	1d3a      	adds	r2, r7, #4
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fe56 	bl	800312c <xTaskCheckForTimeOut>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d123      	bne.n	80024ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002488:	f000 f916 	bl	80026b8 <prvIsQueueEmpty>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d017      	beq.n	80024c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	3324      	adds	r3, #36	@ 0x24
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fd7a 	bl	8002f94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80024a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024a2:	f000 f8b7 	bl	8002614 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80024a6:	f000 fbaf 	bl	8002c08 <xTaskResumeAll>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d189      	bne.n	80023c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80024b0:	4b0f      	ldr	r3, [pc, #60]	@ (80024f0 <xQueueReceive+0x1c0>)
 80024b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	e780      	b.n	80023c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80024c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024c4:	f000 f8a6 	bl	8002614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024c8:	f000 fb9e 	bl	8002c08 <xTaskResumeAll>
 80024cc:	e77a      	b.n	80023c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80024ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024d0:	f000 f8a0 	bl	8002614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024d4:	f000 fb98 	bl	8002c08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024da:	f000 f8ed 	bl	80026b8 <prvIsQueueEmpty>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f43f af6f 	beq.w	80023c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80024e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3730      	adds	r7, #48	@ 0x30
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	e000ed04 	.word	0xe000ed04

080024f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002508:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10d      	bne.n	800252e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d14d      	bne.n	80025b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	4618      	mov	r0, r3
 8002520:	f000 ff68 	bl	80033f4 <xTaskPriorityDisinherit>
 8002524:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	e043      	b.n	80025b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d119      	bne.n	8002568 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6858      	ldr	r0, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	461a      	mov	r2, r3
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	f002 fa3f 	bl	80049c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	441a      	add	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	429a      	cmp	r2, r3
 800255c:	d32b      	bcc.n	80025b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	e026      	b.n	80025b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68d8      	ldr	r0, [r3, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	461a      	mov	r2, r3
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	f002 fa25 	bl	80049c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	425b      	negs	r3, r3
 8002582:	441a      	add	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d207      	bcs.n	80025a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	425b      	negs	r3, r3
 800259e:	441a      	add	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d105      	bne.n	80025b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80025be:	697b      	ldr	r3, [r7, #20]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d018      	beq.n	800260c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	441a      	add	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d303      	bcc.n	80025fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68d9      	ldr	r1, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	461a      	mov	r2, r3
 8002606:	6838      	ldr	r0, [r7, #0]
 8002608:	f002 f9db 	bl	80049c2 <memcpy>
	}
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800261c:	f001 fc3c 	bl	8003e98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002626:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002628:	e011      	b.n	800264e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	d012      	beq.n	8002658 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3324      	adds	r3, #36	@ 0x24
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fcfe 	bl	8003038 <xTaskRemoveFromEventList>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002642:	f000 fdd7 	bl	80031f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	3b01      	subs	r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800264e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	dce9      	bgt.n	800262a <prvUnlockQueue+0x16>
 8002656:	e000      	b.n	800265a <prvUnlockQueue+0x46>
					break;
 8002658:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	22ff      	movs	r2, #255	@ 0xff
 800265e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002662:	f001 fc4b 	bl	8003efc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002666:	f001 fc17 	bl	8003e98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002670:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002672:	e011      	b.n	8002698 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d012      	beq.n	80026a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3310      	adds	r3, #16
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fcd9 	bl	8003038 <xTaskRemoveFromEventList>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800268c:	f000 fdb2 	bl	80031f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002690:	7bbb      	ldrb	r3, [r7, #14]
 8002692:	3b01      	subs	r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800269c:	2b00      	cmp	r3, #0
 800269e:	dce9      	bgt.n	8002674 <prvUnlockQueue+0x60>
 80026a0:	e000      	b.n	80026a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80026a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	22ff      	movs	r2, #255	@ 0xff
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80026ac:	f001 fc26 	bl	8003efc <vPortExitCritical>
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026c0:	f001 fbea 	bl	8003e98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e001      	b.n	80026d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026d6:	f001 fc11 	bl	8003efc <vPortExitCritical>

	return xReturn;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026ec:	f001 fbd4 	bl	8003e98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d102      	bne.n	8002702 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80026fc:	2301      	movs	r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e001      	b.n	8002706 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002706:	f001 fbf9 	bl	8003efc <vPortExitCritical>

	return xReturn;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	e014      	b.n	800274e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002724:	4a0f      	ldr	r2, [pc, #60]	@ (8002764 <vQueueAddToRegistry+0x50>)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10b      	bne.n	8002748 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002730:	490c      	ldr	r1, [pc, #48]	@ (8002764 <vQueueAddToRegistry+0x50>)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800273a:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <vQueueAddToRegistry+0x50>)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002746:	e006      	b.n	8002756 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3301      	adds	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b07      	cmp	r3, #7
 8002752:	d9e7      	bls.n	8002724 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000790 	.word	0x20000790

08002768 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002778:	f001 fb8e 	bl	8003e98 <vPortEnterCritical>
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002782:	b25b      	sxtb	r3, r3
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d103      	bne.n	8002792 <vQueueWaitForMessageRestricted+0x2a>
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002798:	b25b      	sxtb	r3, r3
 800279a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279e:	d103      	bne.n	80027a8 <vQueueWaitForMessageRestricted+0x40>
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027a8:	f001 fba8 	bl	8003efc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3324      	adds	r3, #36	@ 0x24
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fc0f 	bl	8002fe0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7ff ff26 	bl	8002614 <prvUnlockQueue>
	}
 80027c8:	bf00      	nop
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08e      	sub	sp, #56	@ 0x38
 80027d4:	af04      	add	r7, sp, #16
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80027de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10b      	bne.n	80027fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	623b      	str	r3, [r7, #32]
}
 80027f6:	bf00      	nop
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80027fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10b      	bne.n	800281a <xTaskCreateStatic+0x4a>
	__asm volatile
 8002802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	61fb      	str	r3, [r7, #28]
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	e7fd      	b.n	8002816 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800281a:	235c      	movs	r3, #92	@ 0x5c
 800281c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b5c      	cmp	r3, #92	@ 0x5c
 8002822:	d00b      	beq.n	800283c <xTaskCreateStatic+0x6c>
	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	61bb      	str	r3, [r7, #24]
}
 8002836:	bf00      	nop
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800283c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800283e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01e      	beq.n	8002882 <xTaskCreateStatic+0xb2>
 8002844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01b      	beq.n	8002882 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800284a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	2202      	movs	r2, #2
 8002858:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800285c:	2300      	movs	r3, #0
 800285e:	9303      	str	r3, [sp, #12]
 8002860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002862:	9302      	str	r3, [sp, #8]
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68b9      	ldr	r1, [r7, #8]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f850 	bl	800291a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800287a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800287c:	f000 f8de 	bl	8002a3c <prvAddNewTaskToReadyList>
 8002880:	e001      	b.n	8002886 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002886:	697b      	ldr	r3, [r7, #20]
	}
 8002888:	4618      	mov	r0, r3
 800288a:	3728      	adds	r7, #40	@ 0x28
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08c      	sub	sp, #48	@ 0x30
 8002894:	af04      	add	r7, sp, #16
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 fc19 	bl	80040dc <pvPortMalloc>
 80028aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00e      	beq.n	80028d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028b2:	205c      	movs	r0, #92	@ 0x5c
 80028b4:	f001 fc12 	bl	80040dc <pvPortMalloc>
 80028b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80028c6:	e005      	b.n	80028d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80028c8:	6978      	ldr	r0, [r7, #20]
 80028ca:	f001 fcd5 	bl	8004278 <vPortFree>
 80028ce:	e001      	b.n	80028d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d017      	beq.n	800290a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028e2:	88fa      	ldrh	r2, [r7, #6]
 80028e4:	2300      	movs	r3, #0
 80028e6:	9303      	str	r3, [sp, #12]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	9302      	str	r3, [sp, #8]
 80028ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f80e 	bl	800291a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028fe:	69f8      	ldr	r0, [r7, #28]
 8002900:	f000 f89c 	bl	8002a3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002904:	2301      	movs	r3, #1
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	e002      	b.n	8002910 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002910:	69bb      	ldr	r3, [r7, #24]
	}
 8002912:	4618      	mov	r0, r3
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b088      	sub	sp, #32
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	461a      	mov	r2, r3
 8002932:	21a5      	movs	r1, #165	@ 0xa5
 8002934:	f001 ffca 	bl	80048cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002942:	3b01      	subs	r3, #1
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f023 0307 	bic.w	r3, r3, #7
 8002950:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00b      	beq.n	8002974 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	617b      	str	r3, [r7, #20]
}
 800296e:	bf00      	nop
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01f      	beq.n	80029ba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	e012      	b.n	80029a6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	7819      	ldrb	r1, [r3, #0]
 8002988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	4413      	add	r3, r2
 800298e:	3334      	adds	r3, #52	@ 0x34
 8002990:	460a      	mov	r2, r1
 8002992:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	4413      	add	r3, r2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	3301      	adds	r3, #1
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	2b0f      	cmp	r3, #15
 80029aa:	d9e9      	bls.n	8002980 <prvInitialiseNewTask+0x66>
 80029ac:	e000      	b.n	80029b0 <prvInitialiseNewTask+0x96>
			{
				break;
 80029ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029b8:	e003      	b.n	80029c2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80029ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c4:	2b37      	cmp	r3, #55	@ 0x37
 80029c6:	d901      	bls.n	80029cc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029c8:	2337      	movs	r3, #55	@ 0x37
 80029ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80029cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80029d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80029d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029da:	2200      	movs	r2, #0
 80029dc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e0:	3304      	adds	r3, #4
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff f966 	bl	8001cb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ea:	3318      	adds	r3, #24
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f961 	bl	8001cb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80029fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a06:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	68f9      	ldr	r1, [r7, #12]
 8002a1a:	69b8      	ldr	r0, [r7, #24]
 8002a1c:	f001 f908 	bl	8003c30 <pxPortInitialiseStack>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a32:	bf00      	nop
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a44:	f001 fa28 	bl	8003e98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a48:	4b2d      	ldr	r3, [pc, #180]	@ (8002b00 <prvAddNewTaskToReadyList+0xc4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b00 <prvAddNewTaskToReadyList+0xc4>)
 8002a50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a52:	4b2c      	ldr	r3, [pc, #176]	@ (8002b04 <prvAddNewTaskToReadyList+0xc8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b04 <prvAddNewTaskToReadyList+0xc8>)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a60:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <prvAddNewTaskToReadyList+0xc4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d110      	bne.n	8002a8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002a68:	f000 fbe8 	bl	800323c <prvInitialiseTaskLists>
 8002a6c:	e00d      	b.n	8002a8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a6e:	4b26      	ldr	r3, [pc, #152]	@ (8002b08 <prvAddNewTaskToReadyList+0xcc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a76:	4b23      	ldr	r3, [pc, #140]	@ (8002b04 <prvAddNewTaskToReadyList+0xc8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d802      	bhi.n	8002a8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a84:	4a1f      	ldr	r2, [pc, #124]	@ (8002b04 <prvAddNewTaskToReadyList+0xc8>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a8a:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <prvAddNewTaskToReadyList+0xd0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	4a1e      	ldr	r2, [pc, #120]	@ (8002b0c <prvAddNewTaskToReadyList+0xd0>)
 8002a92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a94:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <prvAddNewTaskToReadyList+0xd0>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <prvAddNewTaskToReadyList+0xd4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d903      	bls.n	8002ab0 <prvAddNewTaskToReadyList+0x74>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aac:	4a18      	ldr	r2, [pc, #96]	@ (8002b10 <prvAddNewTaskToReadyList+0xd4>)
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4a15      	ldr	r2, [pc, #84]	@ (8002b14 <prvAddNewTaskToReadyList+0xd8>)
 8002abe:	441a      	add	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f7ff f901 	bl	8001cce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002acc:	f001 fa16 	bl	8003efc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <prvAddNewTaskToReadyList+0xcc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00e      	beq.n	8002af6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <prvAddNewTaskToReadyList+0xc8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d207      	bcs.n	8002af6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b18 <prvAddNewTaskToReadyList+0xdc>)
 8002ae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f3bf 8f4f 	dsb	sy
 8002af2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000ca4 	.word	0x20000ca4
 8002b04:	200007d0 	.word	0x200007d0
 8002b08:	20000cb0 	.word	0x20000cb0
 8002b0c:	20000cc0 	.word	0x20000cc0
 8002b10:	20000cac 	.word	0x20000cac
 8002b14:	200007d4 	.word	0x200007d4
 8002b18:	e000ed04 	.word	0xe000ed04

08002b1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	@ 0x28
 8002b20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b2a:	463a      	mov	r2, r7
 8002b2c:	1d39      	adds	r1, r7, #4
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff f86a 	bl	8001c0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b38:	6839      	ldr	r1, [r7, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	9202      	str	r2, [sp, #8]
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	2300      	movs	r3, #0
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2300      	movs	r3, #0
 8002b48:	460a      	mov	r2, r1
 8002b4a:	4922      	ldr	r1, [pc, #136]	@ (8002bd4 <vTaskStartScheduler+0xb8>)
 8002b4c:	4822      	ldr	r0, [pc, #136]	@ (8002bd8 <vTaskStartScheduler+0xbc>)
 8002b4e:	f7ff fe3f 	bl	80027d0 <xTaskCreateStatic>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4a21      	ldr	r2, [pc, #132]	@ (8002bdc <vTaskStartScheduler+0xc0>)
 8002b56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b58:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <vTaskStartScheduler+0xc0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b60:	2301      	movs	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e001      	b.n	8002b6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d102      	bne.n	8002b76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002b70:	f000 fd04 	bl	800357c <xTimerCreateTimerTask>
 8002b74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d116      	bne.n	8002baa <vTaskStartScheduler+0x8e>
	__asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	613b      	str	r3, [r7, #16]
}
 8002b8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b90:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <vTaskStartScheduler+0xc4>)
 8002b92:	f04f 32ff 	mov.w	r2, #4294967295
 8002b96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b98:	4b12      	ldr	r3, [pc, #72]	@ (8002be4 <vTaskStartScheduler+0xc8>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b9e:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <vTaskStartScheduler+0xcc>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ba4:	f001 f8d4 	bl	8003d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ba8:	e00f      	b.n	8002bca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d10b      	bne.n	8002bca <vTaskStartScheduler+0xae>
	__asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	60fb      	str	r3, [r7, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	e7fd      	b.n	8002bc6 <vTaskStartScheduler+0xaa>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	08005478 	.word	0x08005478
 8002bd8:	0800320d 	.word	0x0800320d
 8002bdc:	20000cc8 	.word	0x20000cc8
 8002be0:	20000cc4 	.word	0x20000cc4
 8002be4:	20000cb0 	.word	0x20000cb0
 8002be8:	20000ca8 	.word	0x20000ca8

08002bec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002bf0:	4b04      	ldr	r3, [pc, #16]	@ (8002c04 <vTaskSuspendAll+0x18>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	4a03      	ldr	r2, [pc, #12]	@ (8002c04 <vTaskSuspendAll+0x18>)
 8002bf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	20000ccc 	.word	0x20000ccc

08002c08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c16:	4b42      	ldr	r3, [pc, #264]	@ (8002d20 <xTaskResumeAll+0x118>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10b      	bne.n	8002c36 <xTaskResumeAll+0x2e>
	__asm volatile
 8002c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	603b      	str	r3, [r7, #0]
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	e7fd      	b.n	8002c32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c36:	f001 f92f 	bl	8003e98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c3a:	4b39      	ldr	r3, [pc, #228]	@ (8002d20 <xTaskResumeAll+0x118>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	4a37      	ldr	r2, [pc, #220]	@ (8002d20 <xTaskResumeAll+0x118>)
 8002c42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c44:	4b36      	ldr	r3, [pc, #216]	@ (8002d20 <xTaskResumeAll+0x118>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d162      	bne.n	8002d12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c4c:	4b35      	ldr	r3, [pc, #212]	@ (8002d24 <xTaskResumeAll+0x11c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05e      	beq.n	8002d12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c54:	e02f      	b.n	8002cb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c56:	4b34      	ldr	r3, [pc, #208]	@ (8002d28 <xTaskResumeAll+0x120>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3318      	adds	r3, #24
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff f890 	bl	8001d88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff f88b 	bl	8001d88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c76:	4b2d      	ldr	r3, [pc, #180]	@ (8002d2c <xTaskResumeAll+0x124>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d903      	bls.n	8002c86 <xTaskResumeAll+0x7e>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c82:	4a2a      	ldr	r2, [pc, #168]	@ (8002d2c <xTaskResumeAll+0x124>)
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4a27      	ldr	r2, [pc, #156]	@ (8002d30 <xTaskResumeAll+0x128>)
 8002c94:	441a      	add	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f7ff f816 	bl	8001cce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ca6:	4b23      	ldr	r3, [pc, #140]	@ (8002d34 <xTaskResumeAll+0x12c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d302      	bcc.n	8002cb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002cb0:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <xTaskResumeAll+0x130>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d28 <xTaskResumeAll+0x120>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1cb      	bne.n	8002c56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002cc4:	f000 fb58 	bl	8003378 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d3c <xTaskResumeAll+0x134>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d010      	beq.n	8002cf6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002cd4:	f000 f846 	bl	8002d64 <xTaskIncrementTick>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002cde:	4b16      	ldr	r3, [pc, #88]	@ (8002d38 <xTaskResumeAll+0x130>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f1      	bne.n	8002cd4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002cf0:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <xTaskResumeAll+0x134>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002cf6:	4b10      	ldr	r3, [pc, #64]	@ (8002d38 <xTaskResumeAll+0x130>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d02:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <xTaskResumeAll+0x138>)
 8002d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d12:	f001 f8f3 	bl	8003efc <vPortExitCritical>

	return xAlreadyYielded;
 8002d16:	68bb      	ldr	r3, [r7, #8]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000ccc 	.word	0x20000ccc
 8002d24:	20000ca4 	.word	0x20000ca4
 8002d28:	20000c64 	.word	0x20000c64
 8002d2c:	20000cac 	.word	0x20000cac
 8002d30:	200007d4 	.word	0x200007d4
 8002d34:	200007d0 	.word	0x200007d0
 8002d38:	20000cb8 	.word	0x20000cb8
 8002d3c:	20000cb4 	.word	0x20000cb4
 8002d40:	e000ed04 	.word	0xe000ed04

08002d44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002d4a:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <xTaskGetTickCount+0x1c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002d50:	687b      	ldr	r3, [r7, #4]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000ca8 	.word	0x20000ca8

08002d64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8002eac <xTaskIncrementTick+0x148>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 8090 	bne.w	8002e98 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d78:	4b4d      	ldr	r3, [pc, #308]	@ (8002eb0 <xTaskIncrementTick+0x14c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d80:	4a4b      	ldr	r2, [pc, #300]	@ (8002eb0 <xTaskIncrementTick+0x14c>)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d121      	bne.n	8002dd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d8c:	4b49      	ldr	r3, [pc, #292]	@ (8002eb4 <xTaskIncrementTick+0x150>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00b      	beq.n	8002dae <xTaskIncrementTick+0x4a>
	__asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	603b      	str	r3, [r7, #0]
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	e7fd      	b.n	8002daa <xTaskIncrementTick+0x46>
 8002dae:	4b41      	ldr	r3, [pc, #260]	@ (8002eb4 <xTaskIncrementTick+0x150>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	4b40      	ldr	r3, [pc, #256]	@ (8002eb8 <xTaskIncrementTick+0x154>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a3e      	ldr	r2, [pc, #248]	@ (8002eb4 <xTaskIncrementTick+0x150>)
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4a3e      	ldr	r2, [pc, #248]	@ (8002eb8 <xTaskIncrementTick+0x154>)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ebc <xTaskIncrementTick+0x158>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8002ebc <xTaskIncrementTick+0x158>)
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	f000 fad4 	bl	8003378 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <xTaskIncrementTick+0x15c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d349      	bcc.n	8002e6e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dda:	4b36      	ldr	r3, [pc, #216]	@ (8002eb4 <xTaskIncrementTick+0x150>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d104      	bne.n	8002dee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de4:	4b36      	ldr	r3, [pc, #216]	@ (8002ec0 <xTaskIncrementTick+0x15c>)
 8002de6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dea:	601a      	str	r2, [r3, #0]
					break;
 8002dec:	e03f      	b.n	8002e6e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dee:	4b31      	ldr	r3, [pc, #196]	@ (8002eb4 <xTaskIncrementTick+0x150>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d203      	bcs.n	8002e0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e06:	4a2e      	ldr	r2, [pc, #184]	@ (8002ec0 <xTaskIncrementTick+0x15c>)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e0c:	e02f      	b.n	8002e6e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3304      	adds	r3, #4
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe ffb8 	bl	8001d88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d004      	beq.n	8002e2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	3318      	adds	r3, #24
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe ffaf 	bl	8001d88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e2e:	4b25      	ldr	r3, [pc, #148]	@ (8002ec4 <xTaskIncrementTick+0x160>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d903      	bls.n	8002e3e <xTaskIncrementTick+0xda>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3a:	4a22      	ldr	r2, [pc, #136]	@ (8002ec4 <xTaskIncrementTick+0x160>)
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec8 <xTaskIncrementTick+0x164>)
 8002e4c:	441a      	add	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3304      	adds	r3, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f7fe ff3a 	bl	8001cce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ecc <xTaskIncrementTick+0x168>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d3b8      	bcc.n	8002dda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e6c:	e7b5      	b.n	8002dda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e6e:	4b17      	ldr	r3, [pc, #92]	@ (8002ecc <xTaskIncrementTick+0x168>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e74:	4914      	ldr	r1, [pc, #80]	@ (8002ec8 <xTaskIncrementTick+0x164>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d901      	bls.n	8002e8a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002e86:	2301      	movs	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002e8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ed0 <xTaskIncrementTick+0x16c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002e92:	2301      	movs	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e004      	b.n	8002ea2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed4 <xTaskIncrementTick+0x170>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed4 <xTaskIncrementTick+0x170>)
 8002ea0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002ea2:	697b      	ldr	r3, [r7, #20]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000ccc 	.word	0x20000ccc
 8002eb0:	20000ca8 	.word	0x20000ca8
 8002eb4:	20000c5c 	.word	0x20000c5c
 8002eb8:	20000c60 	.word	0x20000c60
 8002ebc:	20000cbc 	.word	0x20000cbc
 8002ec0:	20000cc4 	.word	0x20000cc4
 8002ec4:	20000cac 	.word	0x20000cac
 8002ec8:	200007d4 	.word	0x200007d4
 8002ecc:	200007d0 	.word	0x200007d0
 8002ed0:	20000cb8 	.word	0x20000cb8
 8002ed4:	20000cb4 	.word	0x20000cb4

08002ed8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ede:	4b28      	ldr	r3, [pc, #160]	@ (8002f80 <vTaskSwitchContext+0xa8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ee6:	4b27      	ldr	r3, [pc, #156]	@ (8002f84 <vTaskSwitchContext+0xac>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002eec:	e042      	b.n	8002f74 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8002eee:	4b25      	ldr	r3, [pc, #148]	@ (8002f84 <vTaskSwitchContext+0xac>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ef4:	4b24      	ldr	r3, [pc, #144]	@ (8002f88 <vTaskSwitchContext+0xb0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	e011      	b.n	8002f20 <vTaskSwitchContext+0x48>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <vTaskSwitchContext+0x42>
	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	607b      	str	r3, [r7, #4]
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	e7fd      	b.n	8002f16 <vTaskSwitchContext+0x3e>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	491a      	ldr	r1, [pc, #104]	@ (8002f8c <vTaskSwitchContext+0xb4>)
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0e3      	beq.n	8002efc <vTaskSwitchContext+0x24>
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4a13      	ldr	r2, [pc, #76]	@ (8002f8c <vTaskSwitchContext+0xb4>)
 8002f40:	4413      	add	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3308      	adds	r3, #8
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d104      	bne.n	8002f64 <vTaskSwitchContext+0x8c>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4a09      	ldr	r2, [pc, #36]	@ (8002f90 <vTaskSwitchContext+0xb8>)
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4a06      	ldr	r2, [pc, #24]	@ (8002f88 <vTaskSwitchContext+0xb0>)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	20000ccc 	.word	0x20000ccc
 8002f84:	20000cb8 	.word	0x20000cb8
 8002f88:	20000cac 	.word	0x20000cac
 8002f8c:	200007d4 	.word	0x200007d4
 8002f90:	200007d0 	.word	0x200007d0

08002f94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	60fb      	str	r3, [r7, #12]
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fbc:	4b07      	ldr	r3, [pc, #28]	@ (8002fdc <vTaskPlaceOnEventList+0x48>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3318      	adds	r3, #24
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7fe fea6 	bl	8001d16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fca:	2101      	movs	r1, #1
 8002fcc:	6838      	ldr	r0, [r7, #0]
 8002fce:	f000 fa81 	bl	80034d4 <prvAddCurrentTaskToDelayedList>
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200007d0 	.word	0x200007d0

08002fe0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10b      	bne.n	800300a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	617b      	str	r3, [r7, #20]
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	e7fd      	b.n	8003006 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800300a:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <vTaskPlaceOnEventListRestricted+0x54>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3318      	adds	r3, #24
 8003010:	4619      	mov	r1, r3
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7fe fe5b 	bl	8001cce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
 8003022:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	68b8      	ldr	r0, [r7, #8]
 8003028:	f000 fa54 	bl	80034d4 <prvAddCurrentTaskToDelayedList>
	}
 800302c:	bf00      	nop
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200007d0 	.word	0x200007d0

08003038 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10b      	bne.n	8003066 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	60fb      	str	r3, [r7, #12]
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	e7fd      	b.n	8003062 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	3318      	adds	r3, #24
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe fe8c 	bl	8001d88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003070:	4b1d      	ldr	r3, [pc, #116]	@ (80030e8 <xTaskRemoveFromEventList+0xb0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d11d      	bne.n	80030b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	3304      	adds	r3, #4
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fe83 	bl	8001d88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003086:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <xTaskRemoveFromEventList+0xb4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d903      	bls.n	8003096 <xTaskRemoveFromEventList+0x5e>
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003092:	4a16      	ldr	r2, [pc, #88]	@ (80030ec <xTaskRemoveFromEventList+0xb4>)
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4a13      	ldr	r2, [pc, #76]	@ (80030f0 <xTaskRemoveFromEventList+0xb8>)
 80030a4:	441a      	add	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	3304      	adds	r3, #4
 80030aa:	4619      	mov	r1, r3
 80030ac:	4610      	mov	r0, r2
 80030ae:	f7fe fe0e 	bl	8001cce <vListInsertEnd>
 80030b2:	e005      	b.n	80030c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	3318      	adds	r3, #24
 80030b8:	4619      	mov	r1, r3
 80030ba:	480e      	ldr	r0, [pc, #56]	@ (80030f4 <xTaskRemoveFromEventList+0xbc>)
 80030bc:	f7fe fe07 	bl	8001cce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c4:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <xTaskRemoveFromEventList+0xc0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d905      	bls.n	80030da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80030ce:	2301      	movs	r3, #1
 80030d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80030d2:	4b0a      	ldr	r3, [pc, #40]	@ (80030fc <xTaskRemoveFromEventList+0xc4>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	e001      	b.n	80030de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80030de:	697b      	ldr	r3, [r7, #20]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000ccc 	.word	0x20000ccc
 80030ec:	20000cac 	.word	0x20000cac
 80030f0:	200007d4 	.word	0x200007d4
 80030f4:	20000c64 	.word	0x20000c64
 80030f8:	200007d0 	.word	0x200007d0
 80030fc:	20000cb8 	.word	0x20000cb8

08003100 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003108:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <vTaskInternalSetTimeOutState+0x24>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003110:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <vTaskInternalSetTimeOutState+0x28>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	605a      	str	r2, [r3, #4]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	20000cbc 	.word	0x20000cbc
 8003128:	20000ca8 	.word	0x20000ca8

0800312c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10b      	bne.n	8003154 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	613b      	str	r3, [r7, #16]
}
 800314e:	bf00      	nop
 8003150:	bf00      	nop
 8003152:	e7fd      	b.n	8003150 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10b      	bne.n	8003172 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	60fb      	str	r3, [r7, #12]
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	e7fd      	b.n	800316e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003172:	f000 fe91 	bl	8003e98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003176:	4b1d      	ldr	r3, [pc, #116]	@ (80031ec <xTaskCheckForTimeOut+0xc0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318e:	d102      	bne.n	8003196 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	e023      	b.n	80031de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b15      	ldr	r3, [pc, #84]	@ (80031f0 <xTaskCheckForTimeOut+0xc4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d007      	beq.n	80031b2 <xTaskCheckForTimeOut+0x86>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d302      	bcc.n	80031b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80031ac:	2301      	movs	r3, #1
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	e015      	b.n	80031de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d20b      	bcs.n	80031d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	1ad2      	subs	r2, r2, r3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff99 	bl	8003100 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	e004      	b.n	80031de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80031da:	2301      	movs	r3, #1
 80031dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80031de:	f000 fe8d 	bl	8003efc <vPortExitCritical>

	return xReturn;
 80031e2:	69fb      	ldr	r3, [r7, #28]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3720      	adds	r7, #32
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000ca8 	.word	0x20000ca8
 80031f0:	20000cbc 	.word	0x20000cbc

080031f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80031f8:	4b03      	ldr	r3, [pc, #12]	@ (8003208 <vTaskMissedYield+0x14>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	20000cb8 	.word	0x20000cb8

0800320c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003214:	f000 f852 	bl	80032bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003218:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <prvIdleTask+0x28>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d9f9      	bls.n	8003214 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003220:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <prvIdleTask+0x2c>)
 8003222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003230:	e7f0      	b.n	8003214 <prvIdleTask+0x8>
 8003232:	bf00      	nop
 8003234:	200007d4 	.word	0x200007d4
 8003238:	e000ed04 	.word	0xe000ed04

0800323c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	e00c      	b.n	8003262 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4a12      	ldr	r2, [pc, #72]	@ (800329c <prvInitialiseTaskLists+0x60>)
 8003254:	4413      	add	r3, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe fd0c 	bl	8001c74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3301      	adds	r3, #1
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b37      	cmp	r3, #55	@ 0x37
 8003266:	d9ef      	bls.n	8003248 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003268:	480d      	ldr	r0, [pc, #52]	@ (80032a0 <prvInitialiseTaskLists+0x64>)
 800326a:	f7fe fd03 	bl	8001c74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800326e:	480d      	ldr	r0, [pc, #52]	@ (80032a4 <prvInitialiseTaskLists+0x68>)
 8003270:	f7fe fd00 	bl	8001c74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003274:	480c      	ldr	r0, [pc, #48]	@ (80032a8 <prvInitialiseTaskLists+0x6c>)
 8003276:	f7fe fcfd 	bl	8001c74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800327a:	480c      	ldr	r0, [pc, #48]	@ (80032ac <prvInitialiseTaskLists+0x70>)
 800327c:	f7fe fcfa 	bl	8001c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003280:	480b      	ldr	r0, [pc, #44]	@ (80032b0 <prvInitialiseTaskLists+0x74>)
 8003282:	f7fe fcf7 	bl	8001c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003286:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <prvInitialiseTaskLists+0x78>)
 8003288:	4a05      	ldr	r2, [pc, #20]	@ (80032a0 <prvInitialiseTaskLists+0x64>)
 800328a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800328c:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <prvInitialiseTaskLists+0x7c>)
 800328e:	4a05      	ldr	r2, [pc, #20]	@ (80032a4 <prvInitialiseTaskLists+0x68>)
 8003290:	601a      	str	r2, [r3, #0]
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	200007d4 	.word	0x200007d4
 80032a0:	20000c34 	.word	0x20000c34
 80032a4:	20000c48 	.word	0x20000c48
 80032a8:	20000c64 	.word	0x20000c64
 80032ac:	20000c78 	.word	0x20000c78
 80032b0:	20000c90 	.word	0x20000c90
 80032b4:	20000c5c 	.word	0x20000c5c
 80032b8:	20000c60 	.word	0x20000c60

080032bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032c2:	e019      	b.n	80032f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80032c4:	f000 fde8 	bl	8003e98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c8:	4b10      	ldr	r3, [pc, #64]	@ (800330c <prvCheckTasksWaitingTermination+0x50>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe fd57 	bl	8001d88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80032da:	4b0d      	ldr	r3, [pc, #52]	@ (8003310 <prvCheckTasksWaitingTermination+0x54>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	3b01      	subs	r3, #1
 80032e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003310 <prvCheckTasksWaitingTermination+0x54>)
 80032e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <prvCheckTasksWaitingTermination+0x58>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003314 <prvCheckTasksWaitingTermination+0x58>)
 80032ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032ee:	f000 fe05 	bl	8003efc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f810 	bl	8003318 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032f8:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <prvCheckTasksWaitingTermination+0x58>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e1      	bne.n	80032c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000c78 	.word	0x20000c78
 8003310:	20000ca4 	.word	0x20000ca4
 8003314:	20000c8c 	.word	0x20000c8c

08003318 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	4618      	mov	r0, r3
 8003330:	f000 ffa2 	bl	8004278 <vPortFree>
				vPortFree( pxTCB );
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 ff9f 	bl	8004278 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800333a:	e019      	b.n	8003370 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003342:	2b01      	cmp	r3, #1
 8003344:	d103      	bne.n	800334e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 ff96 	bl	8004278 <vPortFree>
	}
 800334c:	e010      	b.n	8003370 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003354:	2b02      	cmp	r3, #2
 8003356:	d00b      	beq.n	8003370 <prvDeleteTCB+0x58>
	__asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	60fb      	str	r3, [r7, #12]
}
 800336a:	bf00      	nop
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <prvDeleteTCB+0x54>
	}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800337e:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <prvResetNextTaskUnblockTime+0x38>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d104      	bne.n	8003392 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003388:	4b0a      	ldr	r3, [pc, #40]	@ (80033b4 <prvResetNextTaskUnblockTime+0x3c>)
 800338a:	f04f 32ff 	mov.w	r2, #4294967295
 800338e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003390:	e008      	b.n	80033a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003392:	4b07      	ldr	r3, [pc, #28]	@ (80033b0 <prvResetNextTaskUnblockTime+0x38>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4a04      	ldr	r2, [pc, #16]	@ (80033b4 <prvResetNextTaskUnblockTime+0x3c>)
 80033a2:	6013      	str	r3, [r2, #0]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	20000c5c 	.word	0x20000c5c
 80033b4:	20000cc4 	.word	0x20000cc4

080033b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80033be:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <xTaskGetSchedulerState+0x34>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d102      	bne.n	80033cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80033c6:	2301      	movs	r3, #1
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	e008      	b.n	80033de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033cc:	4b08      	ldr	r3, [pc, #32]	@ (80033f0 <xTaskGetSchedulerState+0x38>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80033d4:	2302      	movs	r3, #2
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	e001      	b.n	80033de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80033da:	2300      	movs	r3, #0
 80033dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80033de:	687b      	ldr	r3, [r7, #4]
	}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	20000cb0 	.word	0x20000cb0
 80033f0:	20000ccc 	.word	0x20000ccc

080033f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d058      	beq.n	80034bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800340a:	4b2f      	ldr	r3, [pc, #188]	@ (80034c8 <xTaskPriorityDisinherit+0xd4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	429a      	cmp	r2, r3
 8003412:	d00b      	beq.n	800342c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	60fb      	str	r3, [r7, #12]
}
 8003426:	bf00      	nop
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	60bb      	str	r3, [r7, #8]
}
 8003446:	bf00      	nop
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003450:	1e5a      	subs	r2, r3, #1
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345e:	429a      	cmp	r2, r3
 8003460:	d02c      	beq.n	80034bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003466:	2b00      	cmp	r3, #0
 8003468:	d128      	bne.n	80034bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	3304      	adds	r3, #4
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe fc8a 	bl	8001d88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003480:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348c:	4b0f      	ldr	r3, [pc, #60]	@ (80034cc <xTaskPriorityDisinherit+0xd8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d903      	bls.n	800349c <xTaskPriorityDisinherit+0xa8>
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	4a0c      	ldr	r2, [pc, #48]	@ (80034cc <xTaskPriorityDisinherit+0xd8>)
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4a09      	ldr	r2, [pc, #36]	@ (80034d0 <xTaskPriorityDisinherit+0xdc>)
 80034aa:	441a      	add	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f7fe fc0b 	bl	8001cce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80034b8:	2301      	movs	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80034bc:	697b      	ldr	r3, [r7, #20]
	}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200007d0 	.word	0x200007d0
 80034cc:	20000cac 	.word	0x20000cac
 80034d0:	200007d4 	.word	0x200007d4

080034d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034de:	4b21      	ldr	r3, [pc, #132]	@ (8003564 <prvAddCurrentTaskToDelayedList+0x90>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034e4:	4b20      	ldr	r3, [pc, #128]	@ (8003568 <prvAddCurrentTaskToDelayedList+0x94>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3304      	adds	r3, #4
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fc4c 	bl	8001d88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d10a      	bne.n	800350e <prvAddCurrentTaskToDelayedList+0x3a>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003568 <prvAddCurrentTaskToDelayedList+0x94>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4819      	ldr	r0, [pc, #100]	@ (800356c <prvAddCurrentTaskToDelayedList+0x98>)
 8003508:	f7fe fbe1 	bl	8001cce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800350c:	e026      	b.n	800355c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003516:	4b14      	ldr	r3, [pc, #80]	@ (8003568 <prvAddCurrentTaskToDelayedList+0x94>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	429a      	cmp	r2, r3
 8003524:	d209      	bcs.n	800353a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003526:	4b12      	ldr	r3, [pc, #72]	@ (8003570 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b0f      	ldr	r3, [pc, #60]	@ (8003568 <prvAddCurrentTaskToDelayedList+0x94>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3304      	adds	r3, #4
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f7fe fbef 	bl	8001d16 <vListInsert>
}
 8003538:	e010      	b.n	800355c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800353a:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <prvAddCurrentTaskToDelayedList+0xa0>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <prvAddCurrentTaskToDelayedList+0x94>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3304      	adds	r3, #4
 8003544:	4619      	mov	r1, r3
 8003546:	4610      	mov	r0, r2
 8003548:	f7fe fbe5 	bl	8001d16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800354c:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <prvAddCurrentTaskToDelayedList+0xa4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	429a      	cmp	r2, r3
 8003554:	d202      	bcs.n	800355c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003556:	4a08      	ldr	r2, [pc, #32]	@ (8003578 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6013      	str	r3, [r2, #0]
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000ca8 	.word	0x20000ca8
 8003568:	200007d0 	.word	0x200007d0
 800356c:	20000c90 	.word	0x20000c90
 8003570:	20000c60 	.word	0x20000c60
 8003574:	20000c5c 	.word	0x20000c5c
 8003578:	20000cc4 	.word	0x20000cc4

0800357c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	@ 0x28
 8003580:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003586:	f000 fb13 	bl	8003bb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800358a:	4b1d      	ldr	r3, [pc, #116]	@ (8003600 <xTimerCreateTimerTask+0x84>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d021      	beq.n	80035d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800359a:	1d3a      	adds	r2, r7, #4
 800359c:	f107 0108 	add.w	r1, r7, #8
 80035a0:	f107 030c 	add.w	r3, r7, #12
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fb4b 	bl	8001c40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	9202      	str	r2, [sp, #8]
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	2302      	movs	r3, #2
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	2300      	movs	r3, #0
 80035ba:	460a      	mov	r2, r1
 80035bc:	4911      	ldr	r1, [pc, #68]	@ (8003604 <xTimerCreateTimerTask+0x88>)
 80035be:	4812      	ldr	r0, [pc, #72]	@ (8003608 <xTimerCreateTimerTask+0x8c>)
 80035c0:	f7ff f906 	bl	80027d0 <xTaskCreateStatic>
 80035c4:	4603      	mov	r3, r0
 80035c6:	4a11      	ldr	r2, [pc, #68]	@ (800360c <xTimerCreateTimerTask+0x90>)
 80035c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80035ca:	4b10      	ldr	r3, [pc, #64]	@ (800360c <xTimerCreateTimerTask+0x90>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80035d2:	2301      	movs	r3, #1
 80035d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	613b      	str	r3, [r7, #16]
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	e7fd      	b.n	80035f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80035f4:	697b      	ldr	r3, [r7, #20]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000d00 	.word	0x20000d00
 8003604:	08005480 	.word	0x08005480
 8003608:	08003749 	.word	0x08003749
 800360c:	20000d04 	.word	0x20000d04

08003610 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	@ 0x28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800361e:	2300      	movs	r3, #0
 8003620:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <xTimerGenericCommand+0x30>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	623b      	str	r3, [r7, #32]
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003640:	4b19      	ldr	r3, [pc, #100]	@ (80036a8 <xTimerGenericCommand+0x98>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02a      	beq.n	800369e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b05      	cmp	r3, #5
 8003658:	dc18      	bgt.n	800368c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800365a:	f7ff fead 	bl	80033b8 <xTaskGetSchedulerState>
 800365e:	4603      	mov	r3, r0
 8003660:	2b02      	cmp	r3, #2
 8003662:	d109      	bne.n	8003678 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003664:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <xTimerGenericCommand+0x98>)
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	f107 0110 	add.w	r1, r7, #16
 800366c:	2300      	movs	r3, #0
 800366e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003670:	f7fe fcbe 	bl	8001ff0 <xQueueGenericSend>
 8003674:	6278      	str	r0, [r7, #36]	@ 0x24
 8003676:	e012      	b.n	800369e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003678:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <xTimerGenericCommand+0x98>)
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	f107 0110 	add.w	r1, r7, #16
 8003680:	2300      	movs	r3, #0
 8003682:	2200      	movs	r2, #0
 8003684:	f7fe fcb4 	bl	8001ff0 <xQueueGenericSend>
 8003688:	6278      	str	r0, [r7, #36]	@ 0x24
 800368a:	e008      	b.n	800369e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800368c:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <xTimerGenericCommand+0x98>)
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	f107 0110 	add.w	r1, r7, #16
 8003694:	2300      	movs	r3, #0
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	f7fe fdac 	bl	80021f4 <xQueueGenericSendFromISR>
 800369c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3728      	adds	r7, #40	@ 0x28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20000d00 	.word	0x20000d00

080036ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b6:	4b23      	ldr	r3, [pc, #140]	@ (8003744 <prvProcessExpiredTimer+0x98>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	3304      	adds	r3, #4
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe fb5f 	bl	8001d88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d023      	beq.n	8003720 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	699a      	ldr	r2, [r3, #24]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	18d1      	adds	r1, r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	6978      	ldr	r0, [r7, #20]
 80036e6:	f000 f8d5 	bl	8003894 <prvInsertTimerInActiveList>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80036f0:	2300      	movs	r3, #0
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2300      	movs	r3, #0
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	2100      	movs	r1, #0
 80036fa:	6978      	ldr	r0, [r7, #20]
 80036fc:	f7ff ff88 	bl	8003610 <xTimerGenericCommand>
 8003700:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d114      	bne.n	8003732 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	60fb      	str	r3, [r7, #12]
}
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	b2da      	uxtb	r2, r3
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	6978      	ldr	r0, [r7, #20]
 8003738:	4798      	blx	r3
}
 800373a:	bf00      	nop
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000cf8 	.word	0x20000cf8

08003748 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003750:	f107 0308 	add.w	r3, r7, #8
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f859 	bl	800380c <prvGetNextExpireTime>
 800375a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4619      	mov	r1, r3
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f805 	bl	8003770 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003766:	f000 f8d7 	bl	8003918 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800376a:	bf00      	nop
 800376c:	e7f0      	b.n	8003750 <prvTimerTask+0x8>
	...

08003770 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800377a:	f7ff fa37 	bl	8002bec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800377e:	f107 0308 	add.w	r3, r7, #8
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f866 	bl	8003854 <prvSampleTimeNow>
 8003788:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d130      	bne.n	80037f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <prvProcessTimerOrBlockTask+0x3c>
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	429a      	cmp	r2, r3
 800379c:	d806      	bhi.n	80037ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800379e:	f7ff fa33 	bl	8002c08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ff81 	bl	80036ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80037aa:	e024      	b.n	80037f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80037b2:	4b13      	ldr	r3, [pc, #76]	@ (8003800 <prvProcessTimerOrBlockTask+0x90>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <prvProcessTimerOrBlockTask+0x50>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <prvProcessTimerOrBlockTask+0x52>
 80037c0:	2300      	movs	r3, #0
 80037c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80037c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003804 <prvProcessTimerOrBlockTask+0x94>)
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	4619      	mov	r1, r3
 80037d2:	f7fe ffc9 	bl	8002768 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80037d6:	f7ff fa17 	bl	8002c08 <xTaskResumeAll>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80037e0:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <prvProcessTimerOrBlockTask+0x98>)
 80037e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	f3bf 8f6f 	isb	sy
}
 80037f0:	e001      	b.n	80037f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80037f2:	f7ff fa09 	bl	8002c08 <xTaskResumeAll>
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000cfc 	.word	0x20000cfc
 8003804:	20000d00 	.word	0x20000d00
 8003808:	e000ed04 	.word	0xe000ed04

0800380c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003814:	4b0e      	ldr	r3, [pc, #56]	@ (8003850 <prvGetNextExpireTime+0x44>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <prvGetNextExpireTime+0x16>
 800381e:	2201      	movs	r2, #1
 8003820:	e000      	b.n	8003824 <prvGetNextExpireTime+0x18>
 8003822:	2200      	movs	r2, #0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003830:	4b07      	ldr	r3, [pc, #28]	@ (8003850 <prvGetNextExpireTime+0x44>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	e001      	b.n	8003840 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003840:	68fb      	ldr	r3, [r7, #12]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000cf8 	.word	0x20000cf8

08003854 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800385c:	f7ff fa72 	bl	8002d44 <xTaskGetTickCount>
 8003860:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003862:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <prvSampleTimeNow+0x3c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	429a      	cmp	r2, r3
 800386a:	d205      	bcs.n	8003878 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800386c:	f000 f93a 	bl	8003ae4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e002      	b.n	800387e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800387e:	4a04      	ldr	r2, [pc, #16]	@ (8003890 <prvSampleTimeNow+0x3c>)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003884:	68fb      	ldr	r3, [r7, #12]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000d08 	.word	0x20000d08

08003894 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d812      	bhi.n	80038e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	1ad2      	subs	r2, r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80038c8:	2301      	movs	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e01b      	b.n	8003906 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038ce:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <prvInsertTimerInActiveList+0x7c>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3304      	adds	r3, #4
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f7fe fa1c 	bl	8001d16 <vListInsert>
 80038de:	e012      	b.n	8003906 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d206      	bcs.n	80038f6 <prvInsertTimerInActiveList+0x62>
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d302      	bcc.n	80038f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	e007      	b.n	8003906 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038f6:	4b07      	ldr	r3, [pc, #28]	@ (8003914 <prvInsertTimerInActiveList+0x80>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3304      	adds	r3, #4
 80038fe:	4619      	mov	r1, r3
 8003900:	4610      	mov	r0, r2
 8003902:	f7fe fa08 	bl	8001d16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003906:	697b      	ldr	r3, [r7, #20]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000cfc 	.word	0x20000cfc
 8003914:	20000cf8 	.word	0x20000cf8

08003918 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08e      	sub	sp, #56	@ 0x38
 800391c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800391e:	e0ce      	b.n	8003abe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	da19      	bge.n	800395a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	3304      	adds	r3, #4
 800392a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800392c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10b      	bne.n	800394a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	61fb      	str	r3, [r7, #28]
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	e7fd      	b.n	8003946 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800394a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003950:	6850      	ldr	r0, [r2, #4]
 8003952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003954:	6892      	ldr	r2, [r2, #8]
 8003956:	4611      	mov	r1, r2
 8003958:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f2c0 80ae 	blt.w	8003abe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003970:	3304      	adds	r3, #4
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe fa08 	bl	8001d88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003978:	463b      	mov	r3, r7
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff ff6a 	bl	8003854 <prvSampleTimeNow>
 8003980:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b09      	cmp	r3, #9
 8003986:	f200 8097 	bhi.w	8003ab8 <prvProcessReceivedCommands+0x1a0>
 800398a:	a201      	add	r2, pc, #4	@ (adr r2, 8003990 <prvProcessReceivedCommands+0x78>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039b9 	.word	0x080039b9
 8003994:	080039b9 	.word	0x080039b9
 8003998:	080039b9 	.word	0x080039b9
 800399c:	08003a2f 	.word	0x08003a2f
 80039a0:	08003a43 	.word	0x08003a43
 80039a4:	08003a8f 	.word	0x08003a8f
 80039a8:	080039b9 	.word	0x080039b9
 80039ac:	080039b9 	.word	0x080039b9
 80039b0:	08003a2f 	.word	0x08003a2f
 80039b4:	08003a43 	.word	0x08003a43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	18d1      	adds	r1, r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039d8:	f7ff ff5c 	bl	8003894 <prvInsertTimerInActiveList>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d06c      	beq.n	8003abc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80039ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d061      	beq.n	8003abc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	441a      	add	r2, r3
 8003a00:	2300      	movs	r3, #0
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	2300      	movs	r3, #0
 8003a06:	2100      	movs	r1, #0
 8003a08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a0a:	f7ff fe01 	bl	8003610 <xTimerGenericCommand>
 8003a0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d152      	bne.n	8003abc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	61bb      	str	r3, [r7, #24]
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	e7fd      	b.n	8003a2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003a40:	e03d      	b.n	8003abe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10b      	bne.n	8003a7a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	617b      	str	r3, [r7, #20]
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	e7fd      	b.n	8003a76 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	18d1      	adds	r1, r2, r3
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a88:	f7ff ff04 	bl	8003894 <prvInsertTimerInActiveList>
					break;
 8003a8c:	e017      	b.n	8003abe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d103      	bne.n	8003aa4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003a9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a9e:	f000 fbeb 	bl	8004278 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003aa2:	e00c      	b.n	8003abe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003ab6:	e002      	b.n	8003abe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003ab8:	bf00      	nop
 8003aba:	e000      	b.n	8003abe <prvProcessReceivedCommands+0x1a6>
					break;
 8003abc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003abe:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <prvProcessReceivedCommands+0x1c8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	1d39      	adds	r1, r7, #4
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fc32 	bl	8002330 <xQueueReceive>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f47f af26 	bne.w	8003920 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3730      	adds	r7, #48	@ 0x30
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000d00 	.word	0x20000d00

08003ae4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003aea:	e049      	b.n	8003b80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aec:	4b2e      	ldr	r3, [pc, #184]	@ (8003ba8 <prvSwitchTimerLists+0xc4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003af6:	4b2c      	ldr	r3, [pc, #176]	@ (8003ba8 <prvSwitchTimerLists+0xc4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3304      	adds	r3, #4
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe f93f 	bl	8001d88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02f      	beq.n	8003b80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4413      	add	r3, r2
 8003b28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d90e      	bls.n	8003b50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba8 <prvSwitchTimerLists+0xc4>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f7fe f8e4 	bl	8001d16 <vListInsert>
 8003b4e:	e017      	b.n	8003b80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b50:	2300      	movs	r3, #0
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2300      	movs	r3, #0
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	2100      	movs	r1, #0
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff fd58 	bl	8003610 <xTimerGenericCommand>
 8003b60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10b      	bne.n	8003b80 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	603b      	str	r3, [r7, #0]
}
 8003b7a:	bf00      	nop
 8003b7c:	bf00      	nop
 8003b7e:	e7fd      	b.n	8003b7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b80:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <prvSwitchTimerLists+0xc4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1b0      	bne.n	8003aec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003b8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ba8 <prvSwitchTimerLists+0xc4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003b90:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <prvSwitchTimerLists+0xc8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a04      	ldr	r2, [pc, #16]	@ (8003ba8 <prvSwitchTimerLists+0xc4>)
 8003b96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003b98:	4a04      	ldr	r2, [pc, #16]	@ (8003bac <prvSwitchTimerLists+0xc8>)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	6013      	str	r3, [r2, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000cf8 	.word	0x20000cf8
 8003bac:	20000cfc 	.word	0x20000cfc

08003bb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003bb6:	f000 f96f 	bl	8003e98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003bba:	4b15      	ldr	r3, [pc, #84]	@ (8003c10 <prvCheckForValidListAndQueue+0x60>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d120      	bne.n	8003c04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003bc2:	4814      	ldr	r0, [pc, #80]	@ (8003c14 <prvCheckForValidListAndQueue+0x64>)
 8003bc4:	f7fe f856 	bl	8001c74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003bc8:	4813      	ldr	r0, [pc, #76]	@ (8003c18 <prvCheckForValidListAndQueue+0x68>)
 8003bca:	f7fe f853 	bl	8001c74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003bce:	4b13      	ldr	r3, [pc, #76]	@ (8003c1c <prvCheckForValidListAndQueue+0x6c>)
 8003bd0:	4a10      	ldr	r2, [pc, #64]	@ (8003c14 <prvCheckForValidListAndQueue+0x64>)
 8003bd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003bd4:	4b12      	ldr	r3, [pc, #72]	@ (8003c20 <prvCheckForValidListAndQueue+0x70>)
 8003bd6:	4a10      	ldr	r2, [pc, #64]	@ (8003c18 <prvCheckForValidListAndQueue+0x68>)
 8003bd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003bda:	2300      	movs	r3, #0
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	4b11      	ldr	r3, [pc, #68]	@ (8003c24 <prvCheckForValidListAndQueue+0x74>)
 8003be0:	4a11      	ldr	r2, [pc, #68]	@ (8003c28 <prvCheckForValidListAndQueue+0x78>)
 8003be2:	2110      	movs	r1, #16
 8003be4:	200a      	movs	r0, #10
 8003be6:	f7fe f963 	bl	8001eb0 <xQueueGenericCreateStatic>
 8003bea:	4603      	mov	r3, r0
 8003bec:	4a08      	ldr	r2, [pc, #32]	@ (8003c10 <prvCheckForValidListAndQueue+0x60>)
 8003bee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003bf0:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <prvCheckForValidListAndQueue+0x60>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003bf8:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <prvCheckForValidListAndQueue+0x60>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	490b      	ldr	r1, [pc, #44]	@ (8003c2c <prvCheckForValidListAndQueue+0x7c>)
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fd88 	bl	8002714 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c04:	f000 f97a 	bl	8003efc <vPortExitCritical>
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000d00 	.word	0x20000d00
 8003c14:	20000cd0 	.word	0x20000cd0
 8003c18:	20000ce4 	.word	0x20000ce4
 8003c1c:	20000cf8 	.word	0x20000cf8
 8003c20:	20000cfc 	.word	0x20000cfc
 8003c24:	20000dac 	.word	0x20000dac
 8003c28:	20000d0c 	.word	0x20000d0c
 8003c2c:	08005488 	.word	0x08005488

08003c30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3b04      	subs	r3, #4
 8003c40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3b04      	subs	r3, #4
 8003c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f023 0201 	bic.w	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3b04      	subs	r3, #4
 8003c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c60:	4a0c      	ldr	r2, [pc, #48]	@ (8003c94 <pxPortInitialiseStack+0x64>)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3b14      	subs	r3, #20
 8003c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3b04      	subs	r3, #4
 8003c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f06f 0202 	mvn.w	r2, #2
 8003c7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3b20      	subs	r3, #32
 8003c84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c86:	68fb      	ldr	r3, [r7, #12]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	08003c99 	.word	0x08003c99

08003c98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ca2:	4b13      	ldr	r3, [pc, #76]	@ (8003cf0 <prvTaskExitError+0x58>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d00b      	beq.n	8003cc4 <prvTaskExitError+0x2c>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	60fb      	str	r3, [r7, #12]
}
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	e7fd      	b.n	8003cc0 <prvTaskExitError+0x28>
	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	60bb      	str	r3, [r7, #8]
}
 8003cd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cd8:	bf00      	nop
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0fc      	beq.n	8003cda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	2000000c 	.word	0x2000000c
	...

08003d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d00:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <pxCurrentTCBConst2>)
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	6808      	ldr	r0, [r1, #0]
 8003d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0a:	f380 8809 	msr	PSP, r0
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f380 8811 	msr	BASEPRI, r0
 8003d1a:	4770      	bx	lr
 8003d1c:	f3af 8000 	nop.w

08003d20 <pxCurrentTCBConst2>:
 8003d20:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop

08003d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d28:	4808      	ldr	r0, [pc, #32]	@ (8003d4c <prvPortStartFirstTask+0x24>)
 8003d2a:	6800      	ldr	r0, [r0, #0]
 8003d2c:	6800      	ldr	r0, [r0, #0]
 8003d2e:	f380 8808 	msr	MSP, r0
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f380 8814 	msr	CONTROL, r0
 8003d3a:	b662      	cpsie	i
 8003d3c:	b661      	cpsie	f
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	df00      	svc	0
 8003d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d4a:	bf00      	nop
 8003d4c:	e000ed08 	.word	0xe000ed08

08003d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d56:	4b47      	ldr	r3, [pc, #284]	@ (8003e74 <xPortStartScheduler+0x124>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a47      	ldr	r2, [pc, #284]	@ (8003e78 <xPortStartScheduler+0x128>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d10b      	bne.n	8003d78 <xPortStartScheduler+0x28>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	613b      	str	r3, [r7, #16]
}
 8003d72:	bf00      	nop
 8003d74:	bf00      	nop
 8003d76:	e7fd      	b.n	8003d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d78:	4b3e      	ldr	r3, [pc, #248]	@ (8003e74 <xPortStartScheduler+0x124>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e7c <xPortStartScheduler+0x12c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d10b      	bne.n	8003d9a <xPortStartScheduler+0x4a>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	60fb      	str	r3, [r7, #12]
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	e7fd      	b.n	8003d96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d9a:	4b39      	ldr	r3, [pc, #228]	@ (8003e80 <xPortStartScheduler+0x130>)
 8003d9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	22ff      	movs	r2, #255	@ 0xff
 8003daa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	4b31      	ldr	r3, [pc, #196]	@ (8003e84 <xPortStartScheduler+0x134>)
 8003dc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003dc2:	4b31      	ldr	r3, [pc, #196]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003dc4:	2207      	movs	r2, #7
 8003dc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dc8:	e009      	b.n	8003dde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003dca:	4b2f      	ldr	r3, [pc, #188]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003dd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de6:	2b80      	cmp	r3, #128	@ 0x80
 8003de8:	d0ef      	beq.n	8003dca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dea:	4b27      	ldr	r3, [pc, #156]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f1c3 0307 	rsb	r3, r3, #7
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d00b      	beq.n	8003e0e <xPortStartScheduler+0xbe>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	60bb      	str	r3, [r7, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	e7fd      	b.n	8003e0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	4a1c      	ldr	r2, [pc, #112]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003e16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e18:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e20:	4a19      	ldr	r2, [pc, #100]	@ (8003e88 <xPortStartScheduler+0x138>)
 8003e22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e2c:	4b17      	ldr	r3, [pc, #92]	@ (8003e8c <xPortStartScheduler+0x13c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a16      	ldr	r2, [pc, #88]	@ (8003e8c <xPortStartScheduler+0x13c>)
 8003e32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e38:	4b14      	ldr	r3, [pc, #80]	@ (8003e8c <xPortStartScheduler+0x13c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a13      	ldr	r2, [pc, #76]	@ (8003e8c <xPortStartScheduler+0x13c>)
 8003e3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003e42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e44:	f000 f8da 	bl	8003ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e48:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <xPortStartScheduler+0x140>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e4e:	f000 f8f9 	bl	8004044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e52:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <xPortStartScheduler+0x144>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a0f      	ldr	r2, [pc, #60]	@ (8003e94 <xPortStartScheduler+0x144>)
 8003e58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003e5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e5e:	f7ff ff63 	bl	8003d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e62:	f7ff f839 	bl	8002ed8 <vTaskSwitchContext>
	prvTaskExitError();
 8003e66:	f7ff ff17 	bl	8003c98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	e000ed00 	.word	0xe000ed00
 8003e78:	410fc271 	.word	0x410fc271
 8003e7c:	410fc270 	.word	0x410fc270
 8003e80:	e000e400 	.word	0xe000e400
 8003e84:	20000dfc 	.word	0x20000dfc
 8003e88:	20000e00 	.word	0x20000e00
 8003e8c:	e000ed20 	.word	0xe000ed20
 8003e90:	2000000c 	.word	0x2000000c
 8003e94:	e000ef34 	.word	0xe000ef34

08003e98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	607b      	str	r3, [r7, #4]
}
 8003eb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003eb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ef4 <vPortEnterCritical+0x5c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef4 <vPortEnterCritical+0x5c>)
 8003eba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <vPortEnterCritical+0x5c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d110      	bne.n	8003ee6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <vPortEnterCritical+0x60>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <vPortEnterCritical+0x4e>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	603b      	str	r3, [r7, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	e7fd      	b.n	8003ee2 <vPortEnterCritical+0x4a>
	}
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	2000000c 	.word	0x2000000c
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f02:	4b12      	ldr	r3, [pc, #72]	@ (8003f4c <vPortExitCritical+0x50>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10b      	bne.n	8003f22 <vPortExitCritical+0x26>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	607b      	str	r3, [r7, #4]
}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	e7fd      	b.n	8003f1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f22:	4b0a      	ldr	r3, [pc, #40]	@ (8003f4c <vPortExitCritical+0x50>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	4a08      	ldr	r2, [pc, #32]	@ (8003f4c <vPortExitCritical+0x50>)
 8003f2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f2c:	4b07      	ldr	r3, [pc, #28]	@ (8003f4c <vPortExitCritical+0x50>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <vPortExitCritical+0x44>
 8003f34:	2300      	movs	r3, #0
 8003f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f383 8811 	msr	BASEPRI, r3
}
 8003f3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	2000000c 	.word	0x2000000c

08003f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f50:	f3ef 8009 	mrs	r0, PSP
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	4b15      	ldr	r3, [pc, #84]	@ (8003fb0 <pxCurrentTCBConst>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	f01e 0f10 	tst.w	lr, #16
 8003f60:	bf08      	it	eq
 8003f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6a:	6010      	str	r0, [r2, #0]
 8003f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003f74:	f380 8811 	msr	BASEPRI, r0
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f7fe ffaa 	bl	8002ed8 <vTaskSwitchContext>
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f380 8811 	msr	BASEPRI, r0
 8003f8c:	bc09      	pop	{r0, r3}
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	6808      	ldr	r0, [r1, #0]
 8003f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f96:	f01e 0f10 	tst.w	lr, #16
 8003f9a:	bf08      	it	eq
 8003f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fa0:	f380 8809 	msr	PSP, r0
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	f3af 8000 	nop.w

08003fb0 <pxCurrentTCBConst>:
 8003fb0:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop

08003fb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	607b      	str	r3, [r7, #4]
}
 8003fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003fd2:	f7fe fec7 	bl	8002d64 <xTaskIncrementTick>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <xPortSysTickHandler+0x40>)
 8003fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f383 8811 	msr	BASEPRI, r3
}
 8003fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004000:	4b0b      	ldr	r3, [pc, #44]	@ (8004030 <vPortSetupTimerInterrupt+0x34>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004006:	4b0b      	ldr	r3, [pc, #44]	@ (8004034 <vPortSetupTimerInterrupt+0x38>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800400c:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <vPortSetupTimerInterrupt+0x3c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0a      	ldr	r2, [pc, #40]	@ (800403c <vPortSetupTimerInterrupt+0x40>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	4a09      	ldr	r2, [pc, #36]	@ (8004040 <vPortSetupTimerInterrupt+0x44>)
 800401a:	3b01      	subs	r3, #1
 800401c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800401e:	4b04      	ldr	r3, [pc, #16]	@ (8004030 <vPortSetupTimerInterrupt+0x34>)
 8004020:	2207      	movs	r2, #7
 8004022:	601a      	str	r2, [r3, #0]
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000e010 	.word	0xe000e010
 8004034:	e000e018 	.word	0xe000e018
 8004038:	20000000 	.word	0x20000000
 800403c:	10624dd3 	.word	0x10624dd3
 8004040:	e000e014 	.word	0xe000e014

08004044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004044:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004054 <vPortEnableVFP+0x10>
 8004048:	6801      	ldr	r1, [r0, #0]
 800404a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800404e:	6001      	str	r1, [r0, #0]
 8004050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004052:	bf00      	nop
 8004054:	e000ed88 	.word	0xe000ed88

08004058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800405e:	f3ef 8305 	mrs	r3, IPSR
 8004062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b0f      	cmp	r3, #15
 8004068:	d915      	bls.n	8004096 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800406a:	4a18      	ldr	r2, [pc, #96]	@ (80040cc <vPortValidateInterruptPriority+0x74>)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004074:	4b16      	ldr	r3, [pc, #88]	@ (80040d0 <vPortValidateInterruptPriority+0x78>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	7afa      	ldrb	r2, [r7, #11]
 800407a:	429a      	cmp	r2, r3
 800407c:	d20b      	bcs.n	8004096 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	607b      	str	r3, [r7, #4]
}
 8004090:	bf00      	nop
 8004092:	bf00      	nop
 8004094:	e7fd      	b.n	8004092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004096:	4b0f      	ldr	r3, [pc, #60]	@ (80040d4 <vPortValidateInterruptPriority+0x7c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800409e:	4b0e      	ldr	r3, [pc, #56]	@ (80040d8 <vPortValidateInterruptPriority+0x80>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d90b      	bls.n	80040be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	603b      	str	r3, [r7, #0]
}
 80040b8:	bf00      	nop
 80040ba:	bf00      	nop
 80040bc:	e7fd      	b.n	80040ba <vPortValidateInterruptPriority+0x62>
	}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	e000e3f0 	.word	0xe000e3f0
 80040d0:	20000dfc 	.word	0x20000dfc
 80040d4:	e000ed0c 	.word	0xe000ed0c
 80040d8:	20000e00 	.word	0x20000e00

080040dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	@ 0x28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040e8:	f7fe fd80 	bl	8002bec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040ec:	4b5c      	ldr	r3, [pc, #368]	@ (8004260 <pvPortMalloc+0x184>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040f4:	f000 f924 	bl	8004340 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004264 <pvPortMalloc+0x188>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	f040 8095 	bne.w	8004230 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01e      	beq.n	800414a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800410c:	2208      	movs	r2, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	2b00      	cmp	r3, #0
 800411c:	d015      	beq.n	800414a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f023 0307 	bic.w	r3, r3, #7
 8004124:	3308      	adds	r3, #8
 8004126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00b      	beq.n	800414a <pvPortMalloc+0x6e>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	617b      	str	r3, [r7, #20]
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	e7fd      	b.n	8004146 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d06f      	beq.n	8004230 <pvPortMalloc+0x154>
 8004150:	4b45      	ldr	r3, [pc, #276]	@ (8004268 <pvPortMalloc+0x18c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	429a      	cmp	r2, r3
 8004158:	d86a      	bhi.n	8004230 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800415a:	4b44      	ldr	r3, [pc, #272]	@ (800426c <pvPortMalloc+0x190>)
 800415c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800415e:	4b43      	ldr	r3, [pc, #268]	@ (800426c <pvPortMalloc+0x190>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004164:	e004      	b.n	8004170 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	429a      	cmp	r2, r3
 8004178:	d903      	bls.n	8004182 <pvPortMalloc+0xa6>
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f1      	bne.n	8004166 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004182:	4b37      	ldr	r3, [pc, #220]	@ (8004260 <pvPortMalloc+0x184>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004188:	429a      	cmp	r2, r3
 800418a:	d051      	beq.n	8004230 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2208      	movs	r2, #8
 8004192:	4413      	add	r3, r2
 8004194:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	1ad2      	subs	r2, r2, r3
 80041a6:	2308      	movs	r3, #8
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d920      	bls.n	80041f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4413      	add	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00b      	beq.n	80041d8 <pvPortMalloc+0xfc>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	613b      	str	r3, [r7, #16]
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	1ad2      	subs	r2, r2, r3
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041ea:	69b8      	ldr	r0, [r7, #24]
 80041ec:	f000 f90a 	bl	8004404 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004268 <pvPortMalloc+0x18c>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004268 <pvPortMalloc+0x18c>)
 80041fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004268 <pvPortMalloc+0x18c>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b1b      	ldr	r3, [pc, #108]	@ (8004270 <pvPortMalloc+0x194>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d203      	bcs.n	8004212 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800420a:	4b17      	ldr	r3, [pc, #92]	@ (8004268 <pvPortMalloc+0x18c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a18      	ldr	r2, [pc, #96]	@ (8004270 <pvPortMalloc+0x194>)
 8004210:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	4b13      	ldr	r3, [pc, #76]	@ (8004264 <pvPortMalloc+0x188>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	431a      	orrs	r2, r3
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004226:	4b13      	ldr	r3, [pc, #76]	@ (8004274 <pvPortMalloc+0x198>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3301      	adds	r3, #1
 800422c:	4a11      	ldr	r2, [pc, #68]	@ (8004274 <pvPortMalloc+0x198>)
 800422e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004230:	f7fe fcea 	bl	8002c08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00b      	beq.n	8004256 <pvPortMalloc+0x17a>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	60fb      	str	r3, [r7, #12]
}
 8004250:	bf00      	nop
 8004252:	bf00      	nop
 8004254:	e7fd      	b.n	8004252 <pvPortMalloc+0x176>
	return pvReturn;
 8004256:	69fb      	ldr	r3, [r7, #28]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3728      	adds	r7, #40	@ 0x28
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20004a0c 	.word	0x20004a0c
 8004264:	20004a20 	.word	0x20004a20
 8004268:	20004a10 	.word	0x20004a10
 800426c:	20004a04 	.word	0x20004a04
 8004270:	20004a14 	.word	0x20004a14
 8004274:	20004a18 	.word	0x20004a18

08004278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d04f      	beq.n	800432a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800428a:	2308      	movs	r3, #8
 800428c:	425b      	negs	r3, r3
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4413      	add	r3, r2
 8004292:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	4b25      	ldr	r3, [pc, #148]	@ (8004334 <vPortFree+0xbc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10b      	bne.n	80042be <vPortFree+0x46>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	60fb      	str	r3, [r7, #12]
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	e7fd      	b.n	80042ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00b      	beq.n	80042de <vPortFree+0x66>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	60bb      	str	r3, [r7, #8]
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	e7fd      	b.n	80042da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	4b14      	ldr	r3, [pc, #80]	@ (8004334 <vPortFree+0xbc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d01e      	beq.n	800432a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d11a      	bne.n	800432a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004334 <vPortFree+0xbc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	401a      	ands	r2, r3
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004304:	f7fe fc72 	bl	8002bec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <vPortFree+0xc0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4413      	add	r3, r2
 8004312:	4a09      	ldr	r2, [pc, #36]	@ (8004338 <vPortFree+0xc0>)
 8004314:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004316:	6938      	ldr	r0, [r7, #16]
 8004318:	f000 f874 	bl	8004404 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800431c:	4b07      	ldr	r3, [pc, #28]	@ (800433c <vPortFree+0xc4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3301      	adds	r3, #1
 8004322:	4a06      	ldr	r2, [pc, #24]	@ (800433c <vPortFree+0xc4>)
 8004324:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004326:	f7fe fc6f 	bl	8002c08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800432a:	bf00      	nop
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20004a20 	.word	0x20004a20
 8004338:	20004a10 	.word	0x20004a10
 800433c:	20004a1c 	.word	0x20004a1c

08004340 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004346:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800434a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800434c:	4b27      	ldr	r3, [pc, #156]	@ (80043ec <prvHeapInit+0xac>)
 800434e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00c      	beq.n	8004374 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3307      	adds	r3, #7
 800435e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0307 	bic.w	r3, r3, #7
 8004366:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	4a1f      	ldr	r2, [pc, #124]	@ (80043ec <prvHeapInit+0xac>)
 8004370:	4413      	add	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004378:	4a1d      	ldr	r2, [pc, #116]	@ (80043f0 <prvHeapInit+0xb0>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800437e:	4b1c      	ldr	r3, [pc, #112]	@ (80043f0 <prvHeapInit+0xb0>)
 8004380:	2200      	movs	r2, #0
 8004382:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	4413      	add	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800438c:	2208      	movs	r2, #8
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0307 	bic.w	r3, r3, #7
 800439a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a15      	ldr	r2, [pc, #84]	@ (80043f4 <prvHeapInit+0xb4>)
 80043a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80043a2:	4b14      	ldr	r3, [pc, #80]	@ (80043f4 <prvHeapInit+0xb4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2200      	movs	r2, #0
 80043a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80043aa:	4b12      	ldr	r3, [pc, #72]	@ (80043f4 <prvHeapInit+0xb4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	1ad2      	subs	r2, r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043c0:	4b0c      	ldr	r3, [pc, #48]	@ (80043f4 <prvHeapInit+0xb4>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4a0a      	ldr	r2, [pc, #40]	@ (80043f8 <prvHeapInit+0xb8>)
 80043ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4a09      	ldr	r2, [pc, #36]	@ (80043fc <prvHeapInit+0xbc>)
 80043d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043d8:	4b09      	ldr	r3, [pc, #36]	@ (8004400 <prvHeapInit+0xc0>)
 80043da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80043de:	601a      	str	r2, [r3, #0]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	20000e04 	.word	0x20000e04
 80043f0:	20004a04 	.word	0x20004a04
 80043f4:	20004a0c 	.word	0x20004a0c
 80043f8:	20004a14 	.word	0x20004a14
 80043fc:	20004a10 	.word	0x20004a10
 8004400:	20004a20 	.word	0x20004a20

08004404 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800440c:	4b28      	ldr	r3, [pc, #160]	@ (80044b0 <prvInsertBlockIntoFreeList+0xac>)
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	e002      	b.n	8004418 <prvInsertBlockIntoFreeList+0x14>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	429a      	cmp	r2, r3
 8004420:	d8f7      	bhi.n	8004412 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	4413      	add	r3, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	d108      	bne.n	8004446 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	441a      	add	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	441a      	add	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d118      	bne.n	800448c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b15      	ldr	r3, [pc, #84]	@ (80044b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d00d      	beq.n	8004482 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	441a      	add	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e008      	b.n	8004494 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004482:	4b0c      	ldr	r3, [pc, #48]	@ (80044b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	e003      	b.n	8004494 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	429a      	cmp	r2, r3
 800449a:	d002      	beq.n	80044a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20004a04 	.word	0x20004a04
 80044b4:	20004a0c 	.word	0x20004a0c

080044b8 <std>:
 80044b8:	2300      	movs	r3, #0
 80044ba:	b510      	push	{r4, lr}
 80044bc:	4604      	mov	r4, r0
 80044be:	e9c0 3300 	strd	r3, r3, [r0]
 80044c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044c6:	6083      	str	r3, [r0, #8]
 80044c8:	8181      	strh	r1, [r0, #12]
 80044ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80044cc:	81c2      	strh	r2, [r0, #14]
 80044ce:	6183      	str	r3, [r0, #24]
 80044d0:	4619      	mov	r1, r3
 80044d2:	2208      	movs	r2, #8
 80044d4:	305c      	adds	r0, #92	@ 0x5c
 80044d6:	f000 f9f9 	bl	80048cc <memset>
 80044da:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <std+0x58>)
 80044dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80044de:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <std+0x5c>)
 80044e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <std+0x60>)
 80044e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044e6:	4b0d      	ldr	r3, [pc, #52]	@ (800451c <std+0x64>)
 80044e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80044ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <std+0x68>)
 80044ec:	6224      	str	r4, [r4, #32]
 80044ee:	429c      	cmp	r4, r3
 80044f0:	d006      	beq.n	8004500 <std+0x48>
 80044f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044f6:	4294      	cmp	r4, r2
 80044f8:	d002      	beq.n	8004500 <std+0x48>
 80044fa:	33d0      	adds	r3, #208	@ 0xd0
 80044fc:	429c      	cmp	r4, r3
 80044fe:	d105      	bne.n	800450c <std+0x54>
 8004500:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004508:	f000 ba58 	b.w	80049bc <__retarget_lock_init_recursive>
 800450c:	bd10      	pop	{r4, pc}
 800450e:	bf00      	nop
 8004510:	0800471d 	.word	0x0800471d
 8004514:	0800473f 	.word	0x0800473f
 8004518:	08004777 	.word	0x08004777
 800451c:	0800479b 	.word	0x0800479b
 8004520:	20004a24 	.word	0x20004a24

08004524 <stdio_exit_handler>:
 8004524:	4a02      	ldr	r2, [pc, #8]	@ (8004530 <stdio_exit_handler+0xc>)
 8004526:	4903      	ldr	r1, [pc, #12]	@ (8004534 <stdio_exit_handler+0x10>)
 8004528:	4803      	ldr	r0, [pc, #12]	@ (8004538 <stdio_exit_handler+0x14>)
 800452a:	f000 b869 	b.w	8004600 <_fwalk_sglue>
 800452e:	bf00      	nop
 8004530:	20000010 	.word	0x20000010
 8004534:	08005279 	.word	0x08005279
 8004538:	20000020 	.word	0x20000020

0800453c <cleanup_stdio>:
 800453c:	6841      	ldr	r1, [r0, #4]
 800453e:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <cleanup_stdio+0x34>)
 8004540:	4299      	cmp	r1, r3
 8004542:	b510      	push	{r4, lr}
 8004544:	4604      	mov	r4, r0
 8004546:	d001      	beq.n	800454c <cleanup_stdio+0x10>
 8004548:	f000 fe96 	bl	8005278 <_fflush_r>
 800454c:	68a1      	ldr	r1, [r4, #8]
 800454e:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <cleanup_stdio+0x38>)
 8004550:	4299      	cmp	r1, r3
 8004552:	d002      	beq.n	800455a <cleanup_stdio+0x1e>
 8004554:	4620      	mov	r0, r4
 8004556:	f000 fe8f 	bl	8005278 <_fflush_r>
 800455a:	68e1      	ldr	r1, [r4, #12]
 800455c:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <cleanup_stdio+0x3c>)
 800455e:	4299      	cmp	r1, r3
 8004560:	d004      	beq.n	800456c <cleanup_stdio+0x30>
 8004562:	4620      	mov	r0, r4
 8004564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004568:	f000 be86 	b.w	8005278 <_fflush_r>
 800456c:	bd10      	pop	{r4, pc}
 800456e:	bf00      	nop
 8004570:	20004a24 	.word	0x20004a24
 8004574:	20004a8c 	.word	0x20004a8c
 8004578:	20004af4 	.word	0x20004af4

0800457c <global_stdio_init.part.0>:
 800457c:	b510      	push	{r4, lr}
 800457e:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <global_stdio_init.part.0+0x30>)
 8004580:	4c0b      	ldr	r4, [pc, #44]	@ (80045b0 <global_stdio_init.part.0+0x34>)
 8004582:	4a0c      	ldr	r2, [pc, #48]	@ (80045b4 <global_stdio_init.part.0+0x38>)
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	4620      	mov	r0, r4
 8004588:	2200      	movs	r2, #0
 800458a:	2104      	movs	r1, #4
 800458c:	f7ff ff94 	bl	80044b8 <std>
 8004590:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004594:	2201      	movs	r2, #1
 8004596:	2109      	movs	r1, #9
 8004598:	f7ff ff8e 	bl	80044b8 <std>
 800459c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045a0:	2202      	movs	r2, #2
 80045a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a6:	2112      	movs	r1, #18
 80045a8:	f7ff bf86 	b.w	80044b8 <std>
 80045ac:	20004b5c 	.word	0x20004b5c
 80045b0:	20004a24 	.word	0x20004a24
 80045b4:	08004525 	.word	0x08004525

080045b8 <__sfp_lock_acquire>:
 80045b8:	4801      	ldr	r0, [pc, #4]	@ (80045c0 <__sfp_lock_acquire+0x8>)
 80045ba:	f000 ba00 	b.w	80049be <__retarget_lock_acquire_recursive>
 80045be:	bf00      	nop
 80045c0:	20004b65 	.word	0x20004b65

080045c4 <__sfp_lock_release>:
 80045c4:	4801      	ldr	r0, [pc, #4]	@ (80045cc <__sfp_lock_release+0x8>)
 80045c6:	f000 b9fb 	b.w	80049c0 <__retarget_lock_release_recursive>
 80045ca:	bf00      	nop
 80045cc:	20004b65 	.word	0x20004b65

080045d0 <__sinit>:
 80045d0:	b510      	push	{r4, lr}
 80045d2:	4604      	mov	r4, r0
 80045d4:	f7ff fff0 	bl	80045b8 <__sfp_lock_acquire>
 80045d8:	6a23      	ldr	r3, [r4, #32]
 80045da:	b11b      	cbz	r3, 80045e4 <__sinit+0x14>
 80045dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045e0:	f7ff bff0 	b.w	80045c4 <__sfp_lock_release>
 80045e4:	4b04      	ldr	r3, [pc, #16]	@ (80045f8 <__sinit+0x28>)
 80045e6:	6223      	str	r3, [r4, #32]
 80045e8:	4b04      	ldr	r3, [pc, #16]	@ (80045fc <__sinit+0x2c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f5      	bne.n	80045dc <__sinit+0xc>
 80045f0:	f7ff ffc4 	bl	800457c <global_stdio_init.part.0>
 80045f4:	e7f2      	b.n	80045dc <__sinit+0xc>
 80045f6:	bf00      	nop
 80045f8:	0800453d 	.word	0x0800453d
 80045fc:	20004b5c 	.word	0x20004b5c

08004600 <_fwalk_sglue>:
 8004600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004604:	4607      	mov	r7, r0
 8004606:	4688      	mov	r8, r1
 8004608:	4614      	mov	r4, r2
 800460a:	2600      	movs	r6, #0
 800460c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004610:	f1b9 0901 	subs.w	r9, r9, #1
 8004614:	d505      	bpl.n	8004622 <_fwalk_sglue+0x22>
 8004616:	6824      	ldr	r4, [r4, #0]
 8004618:	2c00      	cmp	r4, #0
 800461a:	d1f7      	bne.n	800460c <_fwalk_sglue+0xc>
 800461c:	4630      	mov	r0, r6
 800461e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004622:	89ab      	ldrh	r3, [r5, #12]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d907      	bls.n	8004638 <_fwalk_sglue+0x38>
 8004628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800462c:	3301      	adds	r3, #1
 800462e:	d003      	beq.n	8004638 <_fwalk_sglue+0x38>
 8004630:	4629      	mov	r1, r5
 8004632:	4638      	mov	r0, r7
 8004634:	47c0      	blx	r8
 8004636:	4306      	orrs	r6, r0
 8004638:	3568      	adds	r5, #104	@ 0x68
 800463a:	e7e9      	b.n	8004610 <_fwalk_sglue+0x10>

0800463c <iprintf>:
 800463c:	b40f      	push	{r0, r1, r2, r3}
 800463e:	b507      	push	{r0, r1, r2, lr}
 8004640:	4906      	ldr	r1, [pc, #24]	@ (800465c <iprintf+0x20>)
 8004642:	ab04      	add	r3, sp, #16
 8004644:	6808      	ldr	r0, [r1, #0]
 8004646:	f853 2b04 	ldr.w	r2, [r3], #4
 800464a:	6881      	ldr	r1, [r0, #8]
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	f000 fae9 	bl	8004c24 <_vfiprintf_r>
 8004652:	b003      	add	sp, #12
 8004654:	f85d eb04 	ldr.w	lr, [sp], #4
 8004658:	b004      	add	sp, #16
 800465a:	4770      	bx	lr
 800465c:	2000001c 	.word	0x2000001c

08004660 <_puts_r>:
 8004660:	6a03      	ldr	r3, [r0, #32]
 8004662:	b570      	push	{r4, r5, r6, lr}
 8004664:	6884      	ldr	r4, [r0, #8]
 8004666:	4605      	mov	r5, r0
 8004668:	460e      	mov	r6, r1
 800466a:	b90b      	cbnz	r3, 8004670 <_puts_r+0x10>
 800466c:	f7ff ffb0 	bl	80045d0 <__sinit>
 8004670:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004672:	07db      	lsls	r3, r3, #31
 8004674:	d405      	bmi.n	8004682 <_puts_r+0x22>
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	0598      	lsls	r0, r3, #22
 800467a:	d402      	bmi.n	8004682 <_puts_r+0x22>
 800467c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800467e:	f000 f99e 	bl	80049be <__retarget_lock_acquire_recursive>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	0719      	lsls	r1, r3, #28
 8004686:	d502      	bpl.n	800468e <_puts_r+0x2e>
 8004688:	6923      	ldr	r3, [r4, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d135      	bne.n	80046fa <_puts_r+0x9a>
 800468e:	4621      	mov	r1, r4
 8004690:	4628      	mov	r0, r5
 8004692:	f000 f8c5 	bl	8004820 <__swsetup_r>
 8004696:	b380      	cbz	r0, 80046fa <_puts_r+0x9a>
 8004698:	f04f 35ff 	mov.w	r5, #4294967295
 800469c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800469e:	07da      	lsls	r2, r3, #31
 80046a0:	d405      	bmi.n	80046ae <_puts_r+0x4e>
 80046a2:	89a3      	ldrh	r3, [r4, #12]
 80046a4:	059b      	lsls	r3, r3, #22
 80046a6:	d402      	bmi.n	80046ae <_puts_r+0x4e>
 80046a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046aa:	f000 f989 	bl	80049c0 <__retarget_lock_release_recursive>
 80046ae:	4628      	mov	r0, r5
 80046b0:	bd70      	pop	{r4, r5, r6, pc}
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da04      	bge.n	80046c0 <_puts_r+0x60>
 80046b6:	69a2      	ldr	r2, [r4, #24]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	dc17      	bgt.n	80046ec <_puts_r+0x8c>
 80046bc:	290a      	cmp	r1, #10
 80046be:	d015      	beq.n	80046ec <_puts_r+0x8c>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	6022      	str	r2, [r4, #0]
 80046c6:	7019      	strb	r1, [r3, #0]
 80046c8:	68a3      	ldr	r3, [r4, #8]
 80046ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046ce:	3b01      	subs	r3, #1
 80046d0:	60a3      	str	r3, [r4, #8]
 80046d2:	2900      	cmp	r1, #0
 80046d4:	d1ed      	bne.n	80046b2 <_puts_r+0x52>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	da11      	bge.n	80046fe <_puts_r+0x9e>
 80046da:	4622      	mov	r2, r4
 80046dc:	210a      	movs	r1, #10
 80046de:	4628      	mov	r0, r5
 80046e0:	f000 f85f 	bl	80047a2 <__swbuf_r>
 80046e4:	3001      	adds	r0, #1
 80046e6:	d0d7      	beq.n	8004698 <_puts_r+0x38>
 80046e8:	250a      	movs	r5, #10
 80046ea:	e7d7      	b.n	800469c <_puts_r+0x3c>
 80046ec:	4622      	mov	r2, r4
 80046ee:	4628      	mov	r0, r5
 80046f0:	f000 f857 	bl	80047a2 <__swbuf_r>
 80046f4:	3001      	adds	r0, #1
 80046f6:	d1e7      	bne.n	80046c8 <_puts_r+0x68>
 80046f8:	e7ce      	b.n	8004698 <_puts_r+0x38>
 80046fa:	3e01      	subs	r6, #1
 80046fc:	e7e4      	b.n	80046c8 <_puts_r+0x68>
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	6022      	str	r2, [r4, #0]
 8004704:	220a      	movs	r2, #10
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e7ee      	b.n	80046e8 <_puts_r+0x88>
	...

0800470c <puts>:
 800470c:	4b02      	ldr	r3, [pc, #8]	@ (8004718 <puts+0xc>)
 800470e:	4601      	mov	r1, r0
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	f7ff bfa5 	b.w	8004660 <_puts_r>
 8004716:	bf00      	nop
 8004718:	2000001c 	.word	0x2000001c

0800471c <__sread>:
 800471c:	b510      	push	{r4, lr}
 800471e:	460c      	mov	r4, r1
 8004720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004724:	f000 f8fc 	bl	8004920 <_read_r>
 8004728:	2800      	cmp	r0, #0
 800472a:	bfab      	itete	ge
 800472c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800472e:	89a3      	ldrhlt	r3, [r4, #12]
 8004730:	181b      	addge	r3, r3, r0
 8004732:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004736:	bfac      	ite	ge
 8004738:	6563      	strge	r3, [r4, #84]	@ 0x54
 800473a:	81a3      	strhlt	r3, [r4, #12]
 800473c:	bd10      	pop	{r4, pc}

0800473e <__swrite>:
 800473e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004742:	461f      	mov	r7, r3
 8004744:	898b      	ldrh	r3, [r1, #12]
 8004746:	05db      	lsls	r3, r3, #23
 8004748:	4605      	mov	r5, r0
 800474a:	460c      	mov	r4, r1
 800474c:	4616      	mov	r6, r2
 800474e:	d505      	bpl.n	800475c <__swrite+0x1e>
 8004750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004754:	2302      	movs	r3, #2
 8004756:	2200      	movs	r2, #0
 8004758:	f000 f8d0 	bl	80048fc <_lseek_r>
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004762:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004766:	81a3      	strh	r3, [r4, #12]
 8004768:	4632      	mov	r2, r6
 800476a:	463b      	mov	r3, r7
 800476c:	4628      	mov	r0, r5
 800476e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004772:	f000 b8e7 	b.w	8004944 <_write_r>

08004776 <__sseek>:
 8004776:	b510      	push	{r4, lr}
 8004778:	460c      	mov	r4, r1
 800477a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477e:	f000 f8bd 	bl	80048fc <_lseek_r>
 8004782:	1c43      	adds	r3, r0, #1
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	bf15      	itete	ne
 8004788:	6560      	strne	r0, [r4, #84]	@ 0x54
 800478a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800478e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004792:	81a3      	strheq	r3, [r4, #12]
 8004794:	bf18      	it	ne
 8004796:	81a3      	strhne	r3, [r4, #12]
 8004798:	bd10      	pop	{r4, pc}

0800479a <__sclose>:
 800479a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479e:	f000 b89d 	b.w	80048dc <_close_r>

080047a2 <__swbuf_r>:
 80047a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a4:	460e      	mov	r6, r1
 80047a6:	4614      	mov	r4, r2
 80047a8:	4605      	mov	r5, r0
 80047aa:	b118      	cbz	r0, 80047b4 <__swbuf_r+0x12>
 80047ac:	6a03      	ldr	r3, [r0, #32]
 80047ae:	b90b      	cbnz	r3, 80047b4 <__swbuf_r+0x12>
 80047b0:	f7ff ff0e 	bl	80045d0 <__sinit>
 80047b4:	69a3      	ldr	r3, [r4, #24]
 80047b6:	60a3      	str	r3, [r4, #8]
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	071a      	lsls	r2, r3, #28
 80047bc:	d501      	bpl.n	80047c2 <__swbuf_r+0x20>
 80047be:	6923      	ldr	r3, [r4, #16]
 80047c0:	b943      	cbnz	r3, 80047d4 <__swbuf_r+0x32>
 80047c2:	4621      	mov	r1, r4
 80047c4:	4628      	mov	r0, r5
 80047c6:	f000 f82b 	bl	8004820 <__swsetup_r>
 80047ca:	b118      	cbz	r0, 80047d4 <__swbuf_r+0x32>
 80047cc:	f04f 37ff 	mov.w	r7, #4294967295
 80047d0:	4638      	mov	r0, r7
 80047d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	6922      	ldr	r2, [r4, #16]
 80047d8:	1a98      	subs	r0, r3, r2
 80047da:	6963      	ldr	r3, [r4, #20]
 80047dc:	b2f6      	uxtb	r6, r6
 80047de:	4283      	cmp	r3, r0
 80047e0:	4637      	mov	r7, r6
 80047e2:	dc05      	bgt.n	80047f0 <__swbuf_r+0x4e>
 80047e4:	4621      	mov	r1, r4
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 fd46 	bl	8005278 <_fflush_r>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d1ed      	bne.n	80047cc <__swbuf_r+0x2a>
 80047f0:	68a3      	ldr	r3, [r4, #8]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	60a3      	str	r3, [r4, #8]
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	6022      	str	r2, [r4, #0]
 80047fc:	701e      	strb	r6, [r3, #0]
 80047fe:	6962      	ldr	r2, [r4, #20]
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	429a      	cmp	r2, r3
 8004804:	d004      	beq.n	8004810 <__swbuf_r+0x6e>
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	07db      	lsls	r3, r3, #31
 800480a:	d5e1      	bpl.n	80047d0 <__swbuf_r+0x2e>
 800480c:	2e0a      	cmp	r6, #10
 800480e:	d1df      	bne.n	80047d0 <__swbuf_r+0x2e>
 8004810:	4621      	mov	r1, r4
 8004812:	4628      	mov	r0, r5
 8004814:	f000 fd30 	bl	8005278 <_fflush_r>
 8004818:	2800      	cmp	r0, #0
 800481a:	d0d9      	beq.n	80047d0 <__swbuf_r+0x2e>
 800481c:	e7d6      	b.n	80047cc <__swbuf_r+0x2a>
	...

08004820 <__swsetup_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4b29      	ldr	r3, [pc, #164]	@ (80048c8 <__swsetup_r+0xa8>)
 8004824:	4605      	mov	r5, r0
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	460c      	mov	r4, r1
 800482a:	b118      	cbz	r0, 8004834 <__swsetup_r+0x14>
 800482c:	6a03      	ldr	r3, [r0, #32]
 800482e:	b90b      	cbnz	r3, 8004834 <__swsetup_r+0x14>
 8004830:	f7ff fece 	bl	80045d0 <__sinit>
 8004834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004838:	0719      	lsls	r1, r3, #28
 800483a:	d422      	bmi.n	8004882 <__swsetup_r+0x62>
 800483c:	06da      	lsls	r2, r3, #27
 800483e:	d407      	bmi.n	8004850 <__swsetup_r+0x30>
 8004840:	2209      	movs	r2, #9
 8004842:	602a      	str	r2, [r5, #0]
 8004844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004848:	81a3      	strh	r3, [r4, #12]
 800484a:	f04f 30ff 	mov.w	r0, #4294967295
 800484e:	e033      	b.n	80048b8 <__swsetup_r+0x98>
 8004850:	0758      	lsls	r0, r3, #29
 8004852:	d512      	bpl.n	800487a <__swsetup_r+0x5a>
 8004854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004856:	b141      	cbz	r1, 800486a <__swsetup_r+0x4a>
 8004858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800485c:	4299      	cmp	r1, r3
 800485e:	d002      	beq.n	8004866 <__swsetup_r+0x46>
 8004860:	4628      	mov	r0, r5
 8004862:	f000 f8bd 	bl	80049e0 <_free_r>
 8004866:	2300      	movs	r3, #0
 8004868:	6363      	str	r3, [r4, #52]	@ 0x34
 800486a:	89a3      	ldrh	r3, [r4, #12]
 800486c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004870:	81a3      	strh	r3, [r4, #12]
 8004872:	2300      	movs	r3, #0
 8004874:	6063      	str	r3, [r4, #4]
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	f043 0308 	orr.w	r3, r3, #8
 8004880:	81a3      	strh	r3, [r4, #12]
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	b94b      	cbnz	r3, 800489a <__swsetup_r+0x7a>
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800488c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004890:	d003      	beq.n	800489a <__swsetup_r+0x7a>
 8004892:	4621      	mov	r1, r4
 8004894:	4628      	mov	r0, r5
 8004896:	f000 fd3d 	bl	8005314 <__smakebuf_r>
 800489a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800489e:	f013 0201 	ands.w	r2, r3, #1
 80048a2:	d00a      	beq.n	80048ba <__swsetup_r+0x9a>
 80048a4:	2200      	movs	r2, #0
 80048a6:	60a2      	str	r2, [r4, #8]
 80048a8:	6962      	ldr	r2, [r4, #20]
 80048aa:	4252      	negs	r2, r2
 80048ac:	61a2      	str	r2, [r4, #24]
 80048ae:	6922      	ldr	r2, [r4, #16]
 80048b0:	b942      	cbnz	r2, 80048c4 <__swsetup_r+0xa4>
 80048b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048b6:	d1c5      	bne.n	8004844 <__swsetup_r+0x24>
 80048b8:	bd38      	pop	{r3, r4, r5, pc}
 80048ba:	0799      	lsls	r1, r3, #30
 80048bc:	bf58      	it	pl
 80048be:	6962      	ldrpl	r2, [r4, #20]
 80048c0:	60a2      	str	r2, [r4, #8]
 80048c2:	e7f4      	b.n	80048ae <__swsetup_r+0x8e>
 80048c4:	2000      	movs	r0, #0
 80048c6:	e7f7      	b.n	80048b8 <__swsetup_r+0x98>
 80048c8:	2000001c 	.word	0x2000001c

080048cc <memset>:
 80048cc:	4402      	add	r2, r0
 80048ce:	4603      	mov	r3, r0
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d100      	bne.n	80048d6 <memset+0xa>
 80048d4:	4770      	bx	lr
 80048d6:	f803 1b01 	strb.w	r1, [r3], #1
 80048da:	e7f9      	b.n	80048d0 <memset+0x4>

080048dc <_close_r>:
 80048dc:	b538      	push	{r3, r4, r5, lr}
 80048de:	4d06      	ldr	r5, [pc, #24]	@ (80048f8 <_close_r+0x1c>)
 80048e0:	2300      	movs	r3, #0
 80048e2:	4604      	mov	r4, r0
 80048e4:	4608      	mov	r0, r1
 80048e6:	602b      	str	r3, [r5, #0]
 80048e8:	f7fc f85d 	bl	80009a6 <_close>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_close_r+0x1a>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_close_r+0x1a>
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	20004b60 	.word	0x20004b60

080048fc <_lseek_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4d07      	ldr	r5, [pc, #28]	@ (800491c <_lseek_r+0x20>)
 8004900:	4604      	mov	r4, r0
 8004902:	4608      	mov	r0, r1
 8004904:	4611      	mov	r1, r2
 8004906:	2200      	movs	r2, #0
 8004908:	602a      	str	r2, [r5, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f7fc f872 	bl	80009f4 <_lseek>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_lseek_r+0x1e>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	b103      	cbz	r3, 800491a <_lseek_r+0x1e>
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	20004b60 	.word	0x20004b60

08004920 <_read_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4d07      	ldr	r5, [pc, #28]	@ (8004940 <_read_r+0x20>)
 8004924:	4604      	mov	r4, r0
 8004926:	4608      	mov	r0, r1
 8004928:	4611      	mov	r1, r2
 800492a:	2200      	movs	r2, #0
 800492c:	602a      	str	r2, [r5, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	f7fc f800 	bl	8000934 <_read>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	d102      	bne.n	800493e <_read_r+0x1e>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	b103      	cbz	r3, 800493e <_read_r+0x1e>
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	20004b60 	.word	0x20004b60

08004944 <_write_r>:
 8004944:	b538      	push	{r3, r4, r5, lr}
 8004946:	4d07      	ldr	r5, [pc, #28]	@ (8004964 <_write_r+0x20>)
 8004948:	4604      	mov	r4, r0
 800494a:	4608      	mov	r0, r1
 800494c:	4611      	mov	r1, r2
 800494e:	2200      	movs	r2, #0
 8004950:	602a      	str	r2, [r5, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	f7fc f80b 	bl	800096e <_write>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d102      	bne.n	8004962 <_write_r+0x1e>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	b103      	cbz	r3, 8004962 <_write_r+0x1e>
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	20004b60 	.word	0x20004b60

08004968 <__errno>:
 8004968:	4b01      	ldr	r3, [pc, #4]	@ (8004970 <__errno+0x8>)
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	2000001c 	.word	0x2000001c

08004974 <__libc_init_array>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	4d0d      	ldr	r5, [pc, #52]	@ (80049ac <__libc_init_array+0x38>)
 8004978:	4c0d      	ldr	r4, [pc, #52]	@ (80049b0 <__libc_init_array+0x3c>)
 800497a:	1b64      	subs	r4, r4, r5
 800497c:	10a4      	asrs	r4, r4, #2
 800497e:	2600      	movs	r6, #0
 8004980:	42a6      	cmp	r6, r4
 8004982:	d109      	bne.n	8004998 <__libc_init_array+0x24>
 8004984:	4d0b      	ldr	r5, [pc, #44]	@ (80049b4 <__libc_init_array+0x40>)
 8004986:	4c0c      	ldr	r4, [pc, #48]	@ (80049b8 <__libc_init_array+0x44>)
 8004988:	f000 fd32 	bl	80053f0 <_init>
 800498c:	1b64      	subs	r4, r4, r5
 800498e:	10a4      	asrs	r4, r4, #2
 8004990:	2600      	movs	r6, #0
 8004992:	42a6      	cmp	r6, r4
 8004994:	d105      	bne.n	80049a2 <__libc_init_array+0x2e>
 8004996:	bd70      	pop	{r4, r5, r6, pc}
 8004998:	f855 3b04 	ldr.w	r3, [r5], #4
 800499c:	4798      	blx	r3
 800499e:	3601      	adds	r6, #1
 80049a0:	e7ee      	b.n	8004980 <__libc_init_array+0xc>
 80049a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a6:	4798      	blx	r3
 80049a8:	3601      	adds	r6, #1
 80049aa:	e7f2      	b.n	8004992 <__libc_init_array+0x1e>
 80049ac:	080054e4 	.word	0x080054e4
 80049b0:	080054e4 	.word	0x080054e4
 80049b4:	080054e4 	.word	0x080054e4
 80049b8:	080054e8 	.word	0x080054e8

080049bc <__retarget_lock_init_recursive>:
 80049bc:	4770      	bx	lr

080049be <__retarget_lock_acquire_recursive>:
 80049be:	4770      	bx	lr

080049c0 <__retarget_lock_release_recursive>:
 80049c0:	4770      	bx	lr

080049c2 <memcpy>:
 80049c2:	440a      	add	r2, r1
 80049c4:	4291      	cmp	r1, r2
 80049c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80049ca:	d100      	bne.n	80049ce <memcpy+0xc>
 80049cc:	4770      	bx	lr
 80049ce:	b510      	push	{r4, lr}
 80049d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049d8:	4291      	cmp	r1, r2
 80049da:	d1f9      	bne.n	80049d0 <memcpy+0xe>
 80049dc:	bd10      	pop	{r4, pc}
	...

080049e0 <_free_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4605      	mov	r5, r0
 80049e4:	2900      	cmp	r1, #0
 80049e6:	d041      	beq.n	8004a6c <_free_r+0x8c>
 80049e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ec:	1f0c      	subs	r4, r1, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	bfb8      	it	lt
 80049f2:	18e4      	addlt	r4, r4, r3
 80049f4:	f000 f8e0 	bl	8004bb8 <__malloc_lock>
 80049f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a70 <_free_r+0x90>)
 80049fa:	6813      	ldr	r3, [r2, #0]
 80049fc:	b933      	cbnz	r3, 8004a0c <_free_r+0x2c>
 80049fe:	6063      	str	r3, [r4, #4]
 8004a00:	6014      	str	r4, [r2, #0]
 8004a02:	4628      	mov	r0, r5
 8004a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a08:	f000 b8dc 	b.w	8004bc4 <__malloc_unlock>
 8004a0c:	42a3      	cmp	r3, r4
 8004a0e:	d908      	bls.n	8004a22 <_free_r+0x42>
 8004a10:	6820      	ldr	r0, [r4, #0]
 8004a12:	1821      	adds	r1, r4, r0
 8004a14:	428b      	cmp	r3, r1
 8004a16:	bf01      	itttt	eq
 8004a18:	6819      	ldreq	r1, [r3, #0]
 8004a1a:	685b      	ldreq	r3, [r3, #4]
 8004a1c:	1809      	addeq	r1, r1, r0
 8004a1e:	6021      	streq	r1, [r4, #0]
 8004a20:	e7ed      	b.n	80049fe <_free_r+0x1e>
 8004a22:	461a      	mov	r2, r3
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b10b      	cbz	r3, 8004a2c <_free_r+0x4c>
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	d9fa      	bls.n	8004a22 <_free_r+0x42>
 8004a2c:	6811      	ldr	r1, [r2, #0]
 8004a2e:	1850      	adds	r0, r2, r1
 8004a30:	42a0      	cmp	r0, r4
 8004a32:	d10b      	bne.n	8004a4c <_free_r+0x6c>
 8004a34:	6820      	ldr	r0, [r4, #0]
 8004a36:	4401      	add	r1, r0
 8004a38:	1850      	adds	r0, r2, r1
 8004a3a:	4283      	cmp	r3, r0
 8004a3c:	6011      	str	r1, [r2, #0]
 8004a3e:	d1e0      	bne.n	8004a02 <_free_r+0x22>
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	6053      	str	r3, [r2, #4]
 8004a46:	4408      	add	r0, r1
 8004a48:	6010      	str	r0, [r2, #0]
 8004a4a:	e7da      	b.n	8004a02 <_free_r+0x22>
 8004a4c:	d902      	bls.n	8004a54 <_free_r+0x74>
 8004a4e:	230c      	movs	r3, #12
 8004a50:	602b      	str	r3, [r5, #0]
 8004a52:	e7d6      	b.n	8004a02 <_free_r+0x22>
 8004a54:	6820      	ldr	r0, [r4, #0]
 8004a56:	1821      	adds	r1, r4, r0
 8004a58:	428b      	cmp	r3, r1
 8004a5a:	bf04      	itt	eq
 8004a5c:	6819      	ldreq	r1, [r3, #0]
 8004a5e:	685b      	ldreq	r3, [r3, #4]
 8004a60:	6063      	str	r3, [r4, #4]
 8004a62:	bf04      	itt	eq
 8004a64:	1809      	addeq	r1, r1, r0
 8004a66:	6021      	streq	r1, [r4, #0]
 8004a68:	6054      	str	r4, [r2, #4]
 8004a6a:	e7ca      	b.n	8004a02 <_free_r+0x22>
 8004a6c:	bd38      	pop	{r3, r4, r5, pc}
 8004a6e:	bf00      	nop
 8004a70:	20004b6c 	.word	0x20004b6c

08004a74 <sbrk_aligned>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	4e0f      	ldr	r6, [pc, #60]	@ (8004ab4 <sbrk_aligned+0x40>)
 8004a78:	460c      	mov	r4, r1
 8004a7a:	6831      	ldr	r1, [r6, #0]
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	b911      	cbnz	r1, 8004a86 <sbrk_aligned+0x12>
 8004a80:	f000 fca6 	bl	80053d0 <_sbrk_r>
 8004a84:	6030      	str	r0, [r6, #0]
 8004a86:	4621      	mov	r1, r4
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f000 fca1 	bl	80053d0 <_sbrk_r>
 8004a8e:	1c43      	adds	r3, r0, #1
 8004a90:	d103      	bne.n	8004a9a <sbrk_aligned+0x26>
 8004a92:	f04f 34ff 	mov.w	r4, #4294967295
 8004a96:	4620      	mov	r0, r4
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
 8004a9a:	1cc4      	adds	r4, r0, #3
 8004a9c:	f024 0403 	bic.w	r4, r4, #3
 8004aa0:	42a0      	cmp	r0, r4
 8004aa2:	d0f8      	beq.n	8004a96 <sbrk_aligned+0x22>
 8004aa4:	1a21      	subs	r1, r4, r0
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f000 fc92 	bl	80053d0 <_sbrk_r>
 8004aac:	3001      	adds	r0, #1
 8004aae:	d1f2      	bne.n	8004a96 <sbrk_aligned+0x22>
 8004ab0:	e7ef      	b.n	8004a92 <sbrk_aligned+0x1e>
 8004ab2:	bf00      	nop
 8004ab4:	20004b68 	.word	0x20004b68

08004ab8 <_malloc_r>:
 8004ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004abc:	1ccd      	adds	r5, r1, #3
 8004abe:	f025 0503 	bic.w	r5, r5, #3
 8004ac2:	3508      	adds	r5, #8
 8004ac4:	2d0c      	cmp	r5, #12
 8004ac6:	bf38      	it	cc
 8004ac8:	250c      	movcc	r5, #12
 8004aca:	2d00      	cmp	r5, #0
 8004acc:	4606      	mov	r6, r0
 8004ace:	db01      	blt.n	8004ad4 <_malloc_r+0x1c>
 8004ad0:	42a9      	cmp	r1, r5
 8004ad2:	d904      	bls.n	8004ade <_malloc_r+0x26>
 8004ad4:	230c      	movs	r3, #12
 8004ad6:	6033      	str	r3, [r6, #0]
 8004ad8:	2000      	movs	r0, #0
 8004ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ade:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bb4 <_malloc_r+0xfc>
 8004ae2:	f000 f869 	bl	8004bb8 <__malloc_lock>
 8004ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8004aea:	461c      	mov	r4, r3
 8004aec:	bb44      	cbnz	r4, 8004b40 <_malloc_r+0x88>
 8004aee:	4629      	mov	r1, r5
 8004af0:	4630      	mov	r0, r6
 8004af2:	f7ff ffbf 	bl	8004a74 <sbrk_aligned>
 8004af6:	1c43      	adds	r3, r0, #1
 8004af8:	4604      	mov	r4, r0
 8004afa:	d158      	bne.n	8004bae <_malloc_r+0xf6>
 8004afc:	f8d8 4000 	ldr.w	r4, [r8]
 8004b00:	4627      	mov	r7, r4
 8004b02:	2f00      	cmp	r7, #0
 8004b04:	d143      	bne.n	8004b8e <_malloc_r+0xd6>
 8004b06:	2c00      	cmp	r4, #0
 8004b08:	d04b      	beq.n	8004ba2 <_malloc_r+0xea>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	4639      	mov	r1, r7
 8004b0e:	4630      	mov	r0, r6
 8004b10:	eb04 0903 	add.w	r9, r4, r3
 8004b14:	f000 fc5c 	bl	80053d0 <_sbrk_r>
 8004b18:	4581      	cmp	r9, r0
 8004b1a:	d142      	bne.n	8004ba2 <_malloc_r+0xea>
 8004b1c:	6821      	ldr	r1, [r4, #0]
 8004b1e:	1a6d      	subs	r5, r5, r1
 8004b20:	4629      	mov	r1, r5
 8004b22:	4630      	mov	r0, r6
 8004b24:	f7ff ffa6 	bl	8004a74 <sbrk_aligned>
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d03a      	beq.n	8004ba2 <_malloc_r+0xea>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	442b      	add	r3, r5
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	f8d8 3000 	ldr.w	r3, [r8]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	bb62      	cbnz	r2, 8004b94 <_malloc_r+0xdc>
 8004b3a:	f8c8 7000 	str.w	r7, [r8]
 8004b3e:	e00f      	b.n	8004b60 <_malloc_r+0xa8>
 8004b40:	6822      	ldr	r2, [r4, #0]
 8004b42:	1b52      	subs	r2, r2, r5
 8004b44:	d420      	bmi.n	8004b88 <_malloc_r+0xd0>
 8004b46:	2a0b      	cmp	r2, #11
 8004b48:	d917      	bls.n	8004b7a <_malloc_r+0xc2>
 8004b4a:	1961      	adds	r1, r4, r5
 8004b4c:	42a3      	cmp	r3, r4
 8004b4e:	6025      	str	r5, [r4, #0]
 8004b50:	bf18      	it	ne
 8004b52:	6059      	strne	r1, [r3, #4]
 8004b54:	6863      	ldr	r3, [r4, #4]
 8004b56:	bf08      	it	eq
 8004b58:	f8c8 1000 	streq.w	r1, [r8]
 8004b5c:	5162      	str	r2, [r4, r5]
 8004b5e:	604b      	str	r3, [r1, #4]
 8004b60:	4630      	mov	r0, r6
 8004b62:	f000 f82f 	bl	8004bc4 <__malloc_unlock>
 8004b66:	f104 000b 	add.w	r0, r4, #11
 8004b6a:	1d23      	adds	r3, r4, #4
 8004b6c:	f020 0007 	bic.w	r0, r0, #7
 8004b70:	1ac2      	subs	r2, r0, r3
 8004b72:	bf1c      	itt	ne
 8004b74:	1a1b      	subne	r3, r3, r0
 8004b76:	50a3      	strne	r3, [r4, r2]
 8004b78:	e7af      	b.n	8004ada <_malloc_r+0x22>
 8004b7a:	6862      	ldr	r2, [r4, #4]
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	bf0c      	ite	eq
 8004b80:	f8c8 2000 	streq.w	r2, [r8]
 8004b84:	605a      	strne	r2, [r3, #4]
 8004b86:	e7eb      	b.n	8004b60 <_malloc_r+0xa8>
 8004b88:	4623      	mov	r3, r4
 8004b8a:	6864      	ldr	r4, [r4, #4]
 8004b8c:	e7ae      	b.n	8004aec <_malloc_r+0x34>
 8004b8e:	463c      	mov	r4, r7
 8004b90:	687f      	ldr	r7, [r7, #4]
 8004b92:	e7b6      	b.n	8004b02 <_malloc_r+0x4a>
 8004b94:	461a      	mov	r2, r3
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	d1fb      	bne.n	8004b94 <_malloc_r+0xdc>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	6053      	str	r3, [r2, #4]
 8004ba0:	e7de      	b.n	8004b60 <_malloc_r+0xa8>
 8004ba2:	230c      	movs	r3, #12
 8004ba4:	6033      	str	r3, [r6, #0]
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	f000 f80c 	bl	8004bc4 <__malloc_unlock>
 8004bac:	e794      	b.n	8004ad8 <_malloc_r+0x20>
 8004bae:	6005      	str	r5, [r0, #0]
 8004bb0:	e7d6      	b.n	8004b60 <_malloc_r+0xa8>
 8004bb2:	bf00      	nop
 8004bb4:	20004b6c 	.word	0x20004b6c

08004bb8 <__malloc_lock>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	@ (8004bc0 <__malloc_lock+0x8>)
 8004bba:	f7ff bf00 	b.w	80049be <__retarget_lock_acquire_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	20004b64 	.word	0x20004b64

08004bc4 <__malloc_unlock>:
 8004bc4:	4801      	ldr	r0, [pc, #4]	@ (8004bcc <__malloc_unlock+0x8>)
 8004bc6:	f7ff befb 	b.w	80049c0 <__retarget_lock_release_recursive>
 8004bca:	bf00      	nop
 8004bcc:	20004b64 	.word	0x20004b64

08004bd0 <__sfputc_r>:
 8004bd0:	6893      	ldr	r3, [r2, #8]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	b410      	push	{r4}
 8004bd8:	6093      	str	r3, [r2, #8]
 8004bda:	da08      	bge.n	8004bee <__sfputc_r+0x1e>
 8004bdc:	6994      	ldr	r4, [r2, #24]
 8004bde:	42a3      	cmp	r3, r4
 8004be0:	db01      	blt.n	8004be6 <__sfputc_r+0x16>
 8004be2:	290a      	cmp	r1, #10
 8004be4:	d103      	bne.n	8004bee <__sfputc_r+0x1e>
 8004be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bea:	f7ff bdda 	b.w	80047a2 <__swbuf_r>
 8004bee:	6813      	ldr	r3, [r2, #0]
 8004bf0:	1c58      	adds	r0, r3, #1
 8004bf2:	6010      	str	r0, [r2, #0]
 8004bf4:	7019      	strb	r1, [r3, #0]
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <__sfputs_r>:
 8004bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c00:	4606      	mov	r6, r0
 8004c02:	460f      	mov	r7, r1
 8004c04:	4614      	mov	r4, r2
 8004c06:	18d5      	adds	r5, r2, r3
 8004c08:	42ac      	cmp	r4, r5
 8004c0a:	d101      	bne.n	8004c10 <__sfputs_r+0x12>
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	e007      	b.n	8004c20 <__sfputs_r+0x22>
 8004c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c14:	463a      	mov	r2, r7
 8004c16:	4630      	mov	r0, r6
 8004c18:	f7ff ffda 	bl	8004bd0 <__sfputc_r>
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d1f3      	bne.n	8004c08 <__sfputs_r+0xa>
 8004c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c24 <_vfiprintf_r>:
 8004c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c28:	460d      	mov	r5, r1
 8004c2a:	b09d      	sub	sp, #116	@ 0x74
 8004c2c:	4614      	mov	r4, r2
 8004c2e:	4698      	mov	r8, r3
 8004c30:	4606      	mov	r6, r0
 8004c32:	b118      	cbz	r0, 8004c3c <_vfiprintf_r+0x18>
 8004c34:	6a03      	ldr	r3, [r0, #32]
 8004c36:	b90b      	cbnz	r3, 8004c3c <_vfiprintf_r+0x18>
 8004c38:	f7ff fcca 	bl	80045d0 <__sinit>
 8004c3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c3e:	07d9      	lsls	r1, r3, #31
 8004c40:	d405      	bmi.n	8004c4e <_vfiprintf_r+0x2a>
 8004c42:	89ab      	ldrh	r3, [r5, #12]
 8004c44:	059a      	lsls	r2, r3, #22
 8004c46:	d402      	bmi.n	8004c4e <_vfiprintf_r+0x2a>
 8004c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c4a:	f7ff feb8 	bl	80049be <__retarget_lock_acquire_recursive>
 8004c4e:	89ab      	ldrh	r3, [r5, #12]
 8004c50:	071b      	lsls	r3, r3, #28
 8004c52:	d501      	bpl.n	8004c58 <_vfiprintf_r+0x34>
 8004c54:	692b      	ldr	r3, [r5, #16]
 8004c56:	b99b      	cbnz	r3, 8004c80 <_vfiprintf_r+0x5c>
 8004c58:	4629      	mov	r1, r5
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	f7ff fde0 	bl	8004820 <__swsetup_r>
 8004c60:	b170      	cbz	r0, 8004c80 <_vfiprintf_r+0x5c>
 8004c62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c64:	07dc      	lsls	r4, r3, #31
 8004c66:	d504      	bpl.n	8004c72 <_vfiprintf_r+0x4e>
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	b01d      	add	sp, #116	@ 0x74
 8004c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c72:	89ab      	ldrh	r3, [r5, #12]
 8004c74:	0598      	lsls	r0, r3, #22
 8004c76:	d4f7      	bmi.n	8004c68 <_vfiprintf_r+0x44>
 8004c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c7a:	f7ff fea1 	bl	80049c0 <__retarget_lock_release_recursive>
 8004c7e:	e7f3      	b.n	8004c68 <_vfiprintf_r+0x44>
 8004c80:	2300      	movs	r3, #0
 8004c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c84:	2320      	movs	r3, #32
 8004c86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c8e:	2330      	movs	r3, #48	@ 0x30
 8004c90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004e40 <_vfiprintf_r+0x21c>
 8004c94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c98:	f04f 0901 	mov.w	r9, #1
 8004c9c:	4623      	mov	r3, r4
 8004c9e:	469a      	mov	sl, r3
 8004ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ca4:	b10a      	cbz	r2, 8004caa <_vfiprintf_r+0x86>
 8004ca6:	2a25      	cmp	r2, #37	@ 0x25
 8004ca8:	d1f9      	bne.n	8004c9e <_vfiprintf_r+0x7a>
 8004caa:	ebba 0b04 	subs.w	fp, sl, r4
 8004cae:	d00b      	beq.n	8004cc8 <_vfiprintf_r+0xa4>
 8004cb0:	465b      	mov	r3, fp
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	f7ff ffa1 	bl	8004bfe <__sfputs_r>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	f000 80a7 	beq.w	8004e10 <_vfiprintf_r+0x1ec>
 8004cc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cc4:	445a      	add	r2, fp
 8004cc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 809f 	beq.w	8004e10 <_vfiprintf_r+0x1ec>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cdc:	f10a 0a01 	add.w	sl, sl, #1
 8004ce0:	9304      	str	r3, [sp, #16]
 8004ce2:	9307      	str	r3, [sp, #28]
 8004ce4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ce8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cea:	4654      	mov	r4, sl
 8004cec:	2205      	movs	r2, #5
 8004cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cf2:	4853      	ldr	r0, [pc, #332]	@ (8004e40 <_vfiprintf_r+0x21c>)
 8004cf4:	f7fb fa6c 	bl	80001d0 <memchr>
 8004cf8:	9a04      	ldr	r2, [sp, #16]
 8004cfa:	b9d8      	cbnz	r0, 8004d34 <_vfiprintf_r+0x110>
 8004cfc:	06d1      	lsls	r1, r2, #27
 8004cfe:	bf44      	itt	mi
 8004d00:	2320      	movmi	r3, #32
 8004d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d06:	0713      	lsls	r3, r2, #28
 8004d08:	bf44      	itt	mi
 8004d0a:	232b      	movmi	r3, #43	@ 0x2b
 8004d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d10:	f89a 3000 	ldrb.w	r3, [sl]
 8004d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d16:	d015      	beq.n	8004d44 <_vfiprintf_r+0x120>
 8004d18:	9a07      	ldr	r2, [sp, #28]
 8004d1a:	4654      	mov	r4, sl
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	f04f 0c0a 	mov.w	ip, #10
 8004d22:	4621      	mov	r1, r4
 8004d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d28:	3b30      	subs	r3, #48	@ 0x30
 8004d2a:	2b09      	cmp	r3, #9
 8004d2c:	d94b      	bls.n	8004dc6 <_vfiprintf_r+0x1a2>
 8004d2e:	b1b0      	cbz	r0, 8004d5e <_vfiprintf_r+0x13a>
 8004d30:	9207      	str	r2, [sp, #28]
 8004d32:	e014      	b.n	8004d5e <_vfiprintf_r+0x13a>
 8004d34:	eba0 0308 	sub.w	r3, r0, r8
 8004d38:	fa09 f303 	lsl.w	r3, r9, r3
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	9304      	str	r3, [sp, #16]
 8004d40:	46a2      	mov	sl, r4
 8004d42:	e7d2      	b.n	8004cea <_vfiprintf_r+0xc6>
 8004d44:	9b03      	ldr	r3, [sp, #12]
 8004d46:	1d19      	adds	r1, r3, #4
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	9103      	str	r1, [sp, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bfbb      	ittet	lt
 8004d50:	425b      	neglt	r3, r3
 8004d52:	f042 0202 	orrlt.w	r2, r2, #2
 8004d56:	9307      	strge	r3, [sp, #28]
 8004d58:	9307      	strlt	r3, [sp, #28]
 8004d5a:	bfb8      	it	lt
 8004d5c:	9204      	strlt	r2, [sp, #16]
 8004d5e:	7823      	ldrb	r3, [r4, #0]
 8004d60:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d62:	d10a      	bne.n	8004d7a <_vfiprintf_r+0x156>
 8004d64:	7863      	ldrb	r3, [r4, #1]
 8004d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d68:	d132      	bne.n	8004dd0 <_vfiprintf_r+0x1ac>
 8004d6a:	9b03      	ldr	r3, [sp, #12]
 8004d6c:	1d1a      	adds	r2, r3, #4
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	9203      	str	r2, [sp, #12]
 8004d72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d76:	3402      	adds	r4, #2
 8004d78:	9305      	str	r3, [sp, #20]
 8004d7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e50 <_vfiprintf_r+0x22c>
 8004d7e:	7821      	ldrb	r1, [r4, #0]
 8004d80:	2203      	movs	r2, #3
 8004d82:	4650      	mov	r0, sl
 8004d84:	f7fb fa24 	bl	80001d0 <memchr>
 8004d88:	b138      	cbz	r0, 8004d9a <_vfiprintf_r+0x176>
 8004d8a:	9b04      	ldr	r3, [sp, #16]
 8004d8c:	eba0 000a 	sub.w	r0, r0, sl
 8004d90:	2240      	movs	r2, #64	@ 0x40
 8004d92:	4082      	lsls	r2, r0
 8004d94:	4313      	orrs	r3, r2
 8004d96:	3401      	adds	r4, #1
 8004d98:	9304      	str	r3, [sp, #16]
 8004d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d9e:	4829      	ldr	r0, [pc, #164]	@ (8004e44 <_vfiprintf_r+0x220>)
 8004da0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004da4:	2206      	movs	r2, #6
 8004da6:	f7fb fa13 	bl	80001d0 <memchr>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d03f      	beq.n	8004e2e <_vfiprintf_r+0x20a>
 8004dae:	4b26      	ldr	r3, [pc, #152]	@ (8004e48 <_vfiprintf_r+0x224>)
 8004db0:	bb1b      	cbnz	r3, 8004dfa <_vfiprintf_r+0x1d6>
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	3307      	adds	r3, #7
 8004db6:	f023 0307 	bic.w	r3, r3, #7
 8004dba:	3308      	adds	r3, #8
 8004dbc:	9303      	str	r3, [sp, #12]
 8004dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc0:	443b      	add	r3, r7
 8004dc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dc4:	e76a      	b.n	8004c9c <_vfiprintf_r+0x78>
 8004dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dca:	460c      	mov	r4, r1
 8004dcc:	2001      	movs	r0, #1
 8004dce:	e7a8      	b.n	8004d22 <_vfiprintf_r+0xfe>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	3401      	adds	r4, #1
 8004dd4:	9305      	str	r3, [sp, #20]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	f04f 0c0a 	mov.w	ip, #10
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004de2:	3a30      	subs	r2, #48	@ 0x30
 8004de4:	2a09      	cmp	r2, #9
 8004de6:	d903      	bls.n	8004df0 <_vfiprintf_r+0x1cc>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0c6      	beq.n	8004d7a <_vfiprintf_r+0x156>
 8004dec:	9105      	str	r1, [sp, #20]
 8004dee:	e7c4      	b.n	8004d7a <_vfiprintf_r+0x156>
 8004df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004df4:	4604      	mov	r4, r0
 8004df6:	2301      	movs	r3, #1
 8004df8:	e7f0      	b.n	8004ddc <_vfiprintf_r+0x1b8>
 8004dfa:	ab03      	add	r3, sp, #12
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	462a      	mov	r2, r5
 8004e00:	4b12      	ldr	r3, [pc, #72]	@ (8004e4c <_vfiprintf_r+0x228>)
 8004e02:	a904      	add	r1, sp, #16
 8004e04:	4630      	mov	r0, r6
 8004e06:	f3af 8000 	nop.w
 8004e0a:	4607      	mov	r7, r0
 8004e0c:	1c78      	adds	r0, r7, #1
 8004e0e:	d1d6      	bne.n	8004dbe <_vfiprintf_r+0x19a>
 8004e10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e12:	07d9      	lsls	r1, r3, #31
 8004e14:	d405      	bmi.n	8004e22 <_vfiprintf_r+0x1fe>
 8004e16:	89ab      	ldrh	r3, [r5, #12]
 8004e18:	059a      	lsls	r2, r3, #22
 8004e1a:	d402      	bmi.n	8004e22 <_vfiprintf_r+0x1fe>
 8004e1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e1e:	f7ff fdcf 	bl	80049c0 <__retarget_lock_release_recursive>
 8004e22:	89ab      	ldrh	r3, [r5, #12]
 8004e24:	065b      	lsls	r3, r3, #25
 8004e26:	f53f af1f 	bmi.w	8004c68 <_vfiprintf_r+0x44>
 8004e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e2c:	e71e      	b.n	8004c6c <_vfiprintf_r+0x48>
 8004e2e:	ab03      	add	r3, sp, #12
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	462a      	mov	r2, r5
 8004e34:	4b05      	ldr	r3, [pc, #20]	@ (8004e4c <_vfiprintf_r+0x228>)
 8004e36:	a904      	add	r1, sp, #16
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f000 f879 	bl	8004f30 <_printf_i>
 8004e3e:	e7e4      	b.n	8004e0a <_vfiprintf_r+0x1e6>
 8004e40:	080054a8 	.word	0x080054a8
 8004e44:	080054b2 	.word	0x080054b2
 8004e48:	00000000 	.word	0x00000000
 8004e4c:	08004bff 	.word	0x08004bff
 8004e50:	080054ae 	.word	0x080054ae

08004e54 <_printf_common>:
 8004e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	4616      	mov	r6, r2
 8004e5a:	4698      	mov	r8, r3
 8004e5c:	688a      	ldr	r2, [r1, #8]
 8004e5e:	690b      	ldr	r3, [r1, #16]
 8004e60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e64:	4293      	cmp	r3, r2
 8004e66:	bfb8      	it	lt
 8004e68:	4613      	movlt	r3, r2
 8004e6a:	6033      	str	r3, [r6, #0]
 8004e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e70:	4607      	mov	r7, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	b10a      	cbz	r2, 8004e7a <_printf_common+0x26>
 8004e76:	3301      	adds	r3, #1
 8004e78:	6033      	str	r3, [r6, #0]
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	0699      	lsls	r1, r3, #26
 8004e7e:	bf42      	ittt	mi
 8004e80:	6833      	ldrmi	r3, [r6, #0]
 8004e82:	3302      	addmi	r3, #2
 8004e84:	6033      	strmi	r3, [r6, #0]
 8004e86:	6825      	ldr	r5, [r4, #0]
 8004e88:	f015 0506 	ands.w	r5, r5, #6
 8004e8c:	d106      	bne.n	8004e9c <_printf_common+0x48>
 8004e8e:	f104 0a19 	add.w	sl, r4, #25
 8004e92:	68e3      	ldr	r3, [r4, #12]
 8004e94:	6832      	ldr	r2, [r6, #0]
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	42ab      	cmp	r3, r5
 8004e9a:	dc26      	bgt.n	8004eea <_printf_common+0x96>
 8004e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ea0:	6822      	ldr	r2, [r4, #0]
 8004ea2:	3b00      	subs	r3, #0
 8004ea4:	bf18      	it	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	0692      	lsls	r2, r2, #26
 8004eaa:	d42b      	bmi.n	8004f04 <_printf_common+0xb0>
 8004eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	47c8      	blx	r9
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d01e      	beq.n	8004ef8 <_printf_common+0xa4>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	6922      	ldr	r2, [r4, #16]
 8004ebe:	f003 0306 	and.w	r3, r3, #6
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	bf02      	ittt	eq
 8004ec6:	68e5      	ldreq	r5, [r4, #12]
 8004ec8:	6833      	ldreq	r3, [r6, #0]
 8004eca:	1aed      	subeq	r5, r5, r3
 8004ecc:	68a3      	ldr	r3, [r4, #8]
 8004ece:	bf0c      	ite	eq
 8004ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ed4:	2500      	movne	r5, #0
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	bfc4      	itt	gt
 8004eda:	1a9b      	subgt	r3, r3, r2
 8004edc:	18ed      	addgt	r5, r5, r3
 8004ede:	2600      	movs	r6, #0
 8004ee0:	341a      	adds	r4, #26
 8004ee2:	42b5      	cmp	r5, r6
 8004ee4:	d11a      	bne.n	8004f1c <_printf_common+0xc8>
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	e008      	b.n	8004efc <_printf_common+0xa8>
 8004eea:	2301      	movs	r3, #1
 8004eec:	4652      	mov	r2, sl
 8004eee:	4641      	mov	r1, r8
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	47c8      	blx	r9
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d103      	bne.n	8004f00 <_printf_common+0xac>
 8004ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8004efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f00:	3501      	adds	r5, #1
 8004f02:	e7c6      	b.n	8004e92 <_printf_common+0x3e>
 8004f04:	18e1      	adds	r1, r4, r3
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	2030      	movs	r0, #48	@ 0x30
 8004f0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f0e:	4422      	add	r2, r4
 8004f10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f18:	3302      	adds	r3, #2
 8004f1a:	e7c7      	b.n	8004eac <_printf_common+0x58>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	4622      	mov	r2, r4
 8004f20:	4641      	mov	r1, r8
 8004f22:	4638      	mov	r0, r7
 8004f24:	47c8      	blx	r9
 8004f26:	3001      	adds	r0, #1
 8004f28:	d0e6      	beq.n	8004ef8 <_printf_common+0xa4>
 8004f2a:	3601      	adds	r6, #1
 8004f2c:	e7d9      	b.n	8004ee2 <_printf_common+0x8e>
	...

08004f30 <_printf_i>:
 8004f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	7e0f      	ldrb	r7, [r1, #24]
 8004f36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f38:	2f78      	cmp	r7, #120	@ 0x78
 8004f3a:	4691      	mov	r9, r2
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	460c      	mov	r4, r1
 8004f40:	469a      	mov	sl, r3
 8004f42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f46:	d807      	bhi.n	8004f58 <_printf_i+0x28>
 8004f48:	2f62      	cmp	r7, #98	@ 0x62
 8004f4a:	d80a      	bhi.n	8004f62 <_printf_i+0x32>
 8004f4c:	2f00      	cmp	r7, #0
 8004f4e:	f000 80d2 	beq.w	80050f6 <_printf_i+0x1c6>
 8004f52:	2f58      	cmp	r7, #88	@ 0x58
 8004f54:	f000 80b9 	beq.w	80050ca <_printf_i+0x19a>
 8004f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f60:	e03a      	b.n	8004fd8 <_printf_i+0xa8>
 8004f62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f66:	2b15      	cmp	r3, #21
 8004f68:	d8f6      	bhi.n	8004f58 <_printf_i+0x28>
 8004f6a:	a101      	add	r1, pc, #4	@ (adr r1, 8004f70 <_printf_i+0x40>)
 8004f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f70:	08004fc9 	.word	0x08004fc9
 8004f74:	08004fdd 	.word	0x08004fdd
 8004f78:	08004f59 	.word	0x08004f59
 8004f7c:	08004f59 	.word	0x08004f59
 8004f80:	08004f59 	.word	0x08004f59
 8004f84:	08004f59 	.word	0x08004f59
 8004f88:	08004fdd 	.word	0x08004fdd
 8004f8c:	08004f59 	.word	0x08004f59
 8004f90:	08004f59 	.word	0x08004f59
 8004f94:	08004f59 	.word	0x08004f59
 8004f98:	08004f59 	.word	0x08004f59
 8004f9c:	080050dd 	.word	0x080050dd
 8004fa0:	08005007 	.word	0x08005007
 8004fa4:	08005097 	.word	0x08005097
 8004fa8:	08004f59 	.word	0x08004f59
 8004fac:	08004f59 	.word	0x08004f59
 8004fb0:	080050ff 	.word	0x080050ff
 8004fb4:	08004f59 	.word	0x08004f59
 8004fb8:	08005007 	.word	0x08005007
 8004fbc:	08004f59 	.word	0x08004f59
 8004fc0:	08004f59 	.word	0x08004f59
 8004fc4:	0800509f 	.word	0x0800509f
 8004fc8:	6833      	ldr	r3, [r6, #0]
 8004fca:	1d1a      	adds	r2, r3, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6032      	str	r2, [r6, #0]
 8004fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e09d      	b.n	8005118 <_printf_i+0x1e8>
 8004fdc:	6833      	ldr	r3, [r6, #0]
 8004fde:	6820      	ldr	r0, [r4, #0]
 8004fe0:	1d19      	adds	r1, r3, #4
 8004fe2:	6031      	str	r1, [r6, #0]
 8004fe4:	0606      	lsls	r6, r0, #24
 8004fe6:	d501      	bpl.n	8004fec <_printf_i+0xbc>
 8004fe8:	681d      	ldr	r5, [r3, #0]
 8004fea:	e003      	b.n	8004ff4 <_printf_i+0xc4>
 8004fec:	0645      	lsls	r5, r0, #25
 8004fee:	d5fb      	bpl.n	8004fe8 <_printf_i+0xb8>
 8004ff0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ff4:	2d00      	cmp	r5, #0
 8004ff6:	da03      	bge.n	8005000 <_printf_i+0xd0>
 8004ff8:	232d      	movs	r3, #45	@ 0x2d
 8004ffa:	426d      	negs	r5, r5
 8004ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005000:	4859      	ldr	r0, [pc, #356]	@ (8005168 <_printf_i+0x238>)
 8005002:	230a      	movs	r3, #10
 8005004:	e011      	b.n	800502a <_printf_i+0xfa>
 8005006:	6821      	ldr	r1, [r4, #0]
 8005008:	6833      	ldr	r3, [r6, #0]
 800500a:	0608      	lsls	r0, r1, #24
 800500c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005010:	d402      	bmi.n	8005018 <_printf_i+0xe8>
 8005012:	0649      	lsls	r1, r1, #25
 8005014:	bf48      	it	mi
 8005016:	b2ad      	uxthmi	r5, r5
 8005018:	2f6f      	cmp	r7, #111	@ 0x6f
 800501a:	4853      	ldr	r0, [pc, #332]	@ (8005168 <_printf_i+0x238>)
 800501c:	6033      	str	r3, [r6, #0]
 800501e:	bf14      	ite	ne
 8005020:	230a      	movne	r3, #10
 8005022:	2308      	moveq	r3, #8
 8005024:	2100      	movs	r1, #0
 8005026:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800502a:	6866      	ldr	r6, [r4, #4]
 800502c:	60a6      	str	r6, [r4, #8]
 800502e:	2e00      	cmp	r6, #0
 8005030:	bfa2      	ittt	ge
 8005032:	6821      	ldrge	r1, [r4, #0]
 8005034:	f021 0104 	bicge.w	r1, r1, #4
 8005038:	6021      	strge	r1, [r4, #0]
 800503a:	b90d      	cbnz	r5, 8005040 <_printf_i+0x110>
 800503c:	2e00      	cmp	r6, #0
 800503e:	d04b      	beq.n	80050d8 <_printf_i+0x1a8>
 8005040:	4616      	mov	r6, r2
 8005042:	fbb5 f1f3 	udiv	r1, r5, r3
 8005046:	fb03 5711 	mls	r7, r3, r1, r5
 800504a:	5dc7      	ldrb	r7, [r0, r7]
 800504c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005050:	462f      	mov	r7, r5
 8005052:	42bb      	cmp	r3, r7
 8005054:	460d      	mov	r5, r1
 8005056:	d9f4      	bls.n	8005042 <_printf_i+0x112>
 8005058:	2b08      	cmp	r3, #8
 800505a:	d10b      	bne.n	8005074 <_printf_i+0x144>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	07df      	lsls	r7, r3, #31
 8005060:	d508      	bpl.n	8005074 <_printf_i+0x144>
 8005062:	6923      	ldr	r3, [r4, #16]
 8005064:	6861      	ldr	r1, [r4, #4]
 8005066:	4299      	cmp	r1, r3
 8005068:	bfde      	ittt	le
 800506a:	2330      	movle	r3, #48	@ 0x30
 800506c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005070:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005074:	1b92      	subs	r2, r2, r6
 8005076:	6122      	str	r2, [r4, #16]
 8005078:	f8cd a000 	str.w	sl, [sp]
 800507c:	464b      	mov	r3, r9
 800507e:	aa03      	add	r2, sp, #12
 8005080:	4621      	mov	r1, r4
 8005082:	4640      	mov	r0, r8
 8005084:	f7ff fee6 	bl	8004e54 <_printf_common>
 8005088:	3001      	adds	r0, #1
 800508a:	d14a      	bne.n	8005122 <_printf_i+0x1f2>
 800508c:	f04f 30ff 	mov.w	r0, #4294967295
 8005090:	b004      	add	sp, #16
 8005092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	f043 0320 	orr.w	r3, r3, #32
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	4833      	ldr	r0, [pc, #204]	@ (800516c <_printf_i+0x23c>)
 80050a0:	2778      	movs	r7, #120	@ 0x78
 80050a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	6831      	ldr	r1, [r6, #0]
 80050aa:	061f      	lsls	r7, r3, #24
 80050ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80050b0:	d402      	bmi.n	80050b8 <_printf_i+0x188>
 80050b2:	065f      	lsls	r7, r3, #25
 80050b4:	bf48      	it	mi
 80050b6:	b2ad      	uxthmi	r5, r5
 80050b8:	6031      	str	r1, [r6, #0]
 80050ba:	07d9      	lsls	r1, r3, #31
 80050bc:	bf44      	itt	mi
 80050be:	f043 0320 	orrmi.w	r3, r3, #32
 80050c2:	6023      	strmi	r3, [r4, #0]
 80050c4:	b11d      	cbz	r5, 80050ce <_printf_i+0x19e>
 80050c6:	2310      	movs	r3, #16
 80050c8:	e7ac      	b.n	8005024 <_printf_i+0xf4>
 80050ca:	4827      	ldr	r0, [pc, #156]	@ (8005168 <_printf_i+0x238>)
 80050cc:	e7e9      	b.n	80050a2 <_printf_i+0x172>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	f023 0320 	bic.w	r3, r3, #32
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	e7f6      	b.n	80050c6 <_printf_i+0x196>
 80050d8:	4616      	mov	r6, r2
 80050da:	e7bd      	b.n	8005058 <_printf_i+0x128>
 80050dc:	6833      	ldr	r3, [r6, #0]
 80050de:	6825      	ldr	r5, [r4, #0]
 80050e0:	6961      	ldr	r1, [r4, #20]
 80050e2:	1d18      	adds	r0, r3, #4
 80050e4:	6030      	str	r0, [r6, #0]
 80050e6:	062e      	lsls	r6, r5, #24
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	d501      	bpl.n	80050f0 <_printf_i+0x1c0>
 80050ec:	6019      	str	r1, [r3, #0]
 80050ee:	e002      	b.n	80050f6 <_printf_i+0x1c6>
 80050f0:	0668      	lsls	r0, r5, #25
 80050f2:	d5fb      	bpl.n	80050ec <_printf_i+0x1bc>
 80050f4:	8019      	strh	r1, [r3, #0]
 80050f6:	2300      	movs	r3, #0
 80050f8:	6123      	str	r3, [r4, #16]
 80050fa:	4616      	mov	r6, r2
 80050fc:	e7bc      	b.n	8005078 <_printf_i+0x148>
 80050fe:	6833      	ldr	r3, [r6, #0]
 8005100:	1d1a      	adds	r2, r3, #4
 8005102:	6032      	str	r2, [r6, #0]
 8005104:	681e      	ldr	r6, [r3, #0]
 8005106:	6862      	ldr	r2, [r4, #4]
 8005108:	2100      	movs	r1, #0
 800510a:	4630      	mov	r0, r6
 800510c:	f7fb f860 	bl	80001d0 <memchr>
 8005110:	b108      	cbz	r0, 8005116 <_printf_i+0x1e6>
 8005112:	1b80      	subs	r0, r0, r6
 8005114:	6060      	str	r0, [r4, #4]
 8005116:	6863      	ldr	r3, [r4, #4]
 8005118:	6123      	str	r3, [r4, #16]
 800511a:	2300      	movs	r3, #0
 800511c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005120:	e7aa      	b.n	8005078 <_printf_i+0x148>
 8005122:	6923      	ldr	r3, [r4, #16]
 8005124:	4632      	mov	r2, r6
 8005126:	4649      	mov	r1, r9
 8005128:	4640      	mov	r0, r8
 800512a:	47d0      	blx	sl
 800512c:	3001      	adds	r0, #1
 800512e:	d0ad      	beq.n	800508c <_printf_i+0x15c>
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	079b      	lsls	r3, r3, #30
 8005134:	d413      	bmi.n	800515e <_printf_i+0x22e>
 8005136:	68e0      	ldr	r0, [r4, #12]
 8005138:	9b03      	ldr	r3, [sp, #12]
 800513a:	4298      	cmp	r0, r3
 800513c:	bfb8      	it	lt
 800513e:	4618      	movlt	r0, r3
 8005140:	e7a6      	b.n	8005090 <_printf_i+0x160>
 8005142:	2301      	movs	r3, #1
 8005144:	4632      	mov	r2, r6
 8005146:	4649      	mov	r1, r9
 8005148:	4640      	mov	r0, r8
 800514a:	47d0      	blx	sl
 800514c:	3001      	adds	r0, #1
 800514e:	d09d      	beq.n	800508c <_printf_i+0x15c>
 8005150:	3501      	adds	r5, #1
 8005152:	68e3      	ldr	r3, [r4, #12]
 8005154:	9903      	ldr	r1, [sp, #12]
 8005156:	1a5b      	subs	r3, r3, r1
 8005158:	42ab      	cmp	r3, r5
 800515a:	dcf2      	bgt.n	8005142 <_printf_i+0x212>
 800515c:	e7eb      	b.n	8005136 <_printf_i+0x206>
 800515e:	2500      	movs	r5, #0
 8005160:	f104 0619 	add.w	r6, r4, #25
 8005164:	e7f5      	b.n	8005152 <_printf_i+0x222>
 8005166:	bf00      	nop
 8005168:	080054b9 	.word	0x080054b9
 800516c:	080054ca 	.word	0x080054ca

08005170 <__sflush_r>:
 8005170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005178:	0716      	lsls	r6, r2, #28
 800517a:	4605      	mov	r5, r0
 800517c:	460c      	mov	r4, r1
 800517e:	d454      	bmi.n	800522a <__sflush_r+0xba>
 8005180:	684b      	ldr	r3, [r1, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	dc02      	bgt.n	800518c <__sflush_r+0x1c>
 8005186:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	dd48      	ble.n	800521e <__sflush_r+0xae>
 800518c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800518e:	2e00      	cmp	r6, #0
 8005190:	d045      	beq.n	800521e <__sflush_r+0xae>
 8005192:	2300      	movs	r3, #0
 8005194:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005198:	682f      	ldr	r7, [r5, #0]
 800519a:	6a21      	ldr	r1, [r4, #32]
 800519c:	602b      	str	r3, [r5, #0]
 800519e:	d030      	beq.n	8005202 <__sflush_r+0x92>
 80051a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051a2:	89a3      	ldrh	r3, [r4, #12]
 80051a4:	0759      	lsls	r1, r3, #29
 80051a6:	d505      	bpl.n	80051b4 <__sflush_r+0x44>
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	1ad2      	subs	r2, r2, r3
 80051ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051ae:	b10b      	cbz	r3, 80051b4 <__sflush_r+0x44>
 80051b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051b2:	1ad2      	subs	r2, r2, r3
 80051b4:	2300      	movs	r3, #0
 80051b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051b8:	6a21      	ldr	r1, [r4, #32]
 80051ba:	4628      	mov	r0, r5
 80051bc:	47b0      	blx	r6
 80051be:	1c43      	adds	r3, r0, #1
 80051c0:	89a3      	ldrh	r3, [r4, #12]
 80051c2:	d106      	bne.n	80051d2 <__sflush_r+0x62>
 80051c4:	6829      	ldr	r1, [r5, #0]
 80051c6:	291d      	cmp	r1, #29
 80051c8:	d82b      	bhi.n	8005222 <__sflush_r+0xb2>
 80051ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005274 <__sflush_r+0x104>)
 80051cc:	410a      	asrs	r2, r1
 80051ce:	07d6      	lsls	r6, r2, #31
 80051d0:	d427      	bmi.n	8005222 <__sflush_r+0xb2>
 80051d2:	2200      	movs	r2, #0
 80051d4:	6062      	str	r2, [r4, #4]
 80051d6:	04d9      	lsls	r1, r3, #19
 80051d8:	6922      	ldr	r2, [r4, #16]
 80051da:	6022      	str	r2, [r4, #0]
 80051dc:	d504      	bpl.n	80051e8 <__sflush_r+0x78>
 80051de:	1c42      	adds	r2, r0, #1
 80051e0:	d101      	bne.n	80051e6 <__sflush_r+0x76>
 80051e2:	682b      	ldr	r3, [r5, #0]
 80051e4:	b903      	cbnz	r3, 80051e8 <__sflush_r+0x78>
 80051e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80051e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051ea:	602f      	str	r7, [r5, #0]
 80051ec:	b1b9      	cbz	r1, 800521e <__sflush_r+0xae>
 80051ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051f2:	4299      	cmp	r1, r3
 80051f4:	d002      	beq.n	80051fc <__sflush_r+0x8c>
 80051f6:	4628      	mov	r0, r5
 80051f8:	f7ff fbf2 	bl	80049e0 <_free_r>
 80051fc:	2300      	movs	r3, #0
 80051fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005200:	e00d      	b.n	800521e <__sflush_r+0xae>
 8005202:	2301      	movs	r3, #1
 8005204:	4628      	mov	r0, r5
 8005206:	47b0      	blx	r6
 8005208:	4602      	mov	r2, r0
 800520a:	1c50      	adds	r0, r2, #1
 800520c:	d1c9      	bne.n	80051a2 <__sflush_r+0x32>
 800520e:	682b      	ldr	r3, [r5, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0c6      	beq.n	80051a2 <__sflush_r+0x32>
 8005214:	2b1d      	cmp	r3, #29
 8005216:	d001      	beq.n	800521c <__sflush_r+0xac>
 8005218:	2b16      	cmp	r3, #22
 800521a:	d11e      	bne.n	800525a <__sflush_r+0xea>
 800521c:	602f      	str	r7, [r5, #0]
 800521e:	2000      	movs	r0, #0
 8005220:	e022      	b.n	8005268 <__sflush_r+0xf8>
 8005222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005226:	b21b      	sxth	r3, r3
 8005228:	e01b      	b.n	8005262 <__sflush_r+0xf2>
 800522a:	690f      	ldr	r7, [r1, #16]
 800522c:	2f00      	cmp	r7, #0
 800522e:	d0f6      	beq.n	800521e <__sflush_r+0xae>
 8005230:	0793      	lsls	r3, r2, #30
 8005232:	680e      	ldr	r6, [r1, #0]
 8005234:	bf08      	it	eq
 8005236:	694b      	ldreq	r3, [r1, #20]
 8005238:	600f      	str	r7, [r1, #0]
 800523a:	bf18      	it	ne
 800523c:	2300      	movne	r3, #0
 800523e:	eba6 0807 	sub.w	r8, r6, r7
 8005242:	608b      	str	r3, [r1, #8]
 8005244:	f1b8 0f00 	cmp.w	r8, #0
 8005248:	dde9      	ble.n	800521e <__sflush_r+0xae>
 800524a:	6a21      	ldr	r1, [r4, #32]
 800524c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800524e:	4643      	mov	r3, r8
 8005250:	463a      	mov	r2, r7
 8005252:	4628      	mov	r0, r5
 8005254:	47b0      	blx	r6
 8005256:	2800      	cmp	r0, #0
 8005258:	dc08      	bgt.n	800526c <__sflush_r+0xfc>
 800525a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800525e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005262:	81a3      	strh	r3, [r4, #12]
 8005264:	f04f 30ff 	mov.w	r0, #4294967295
 8005268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800526c:	4407      	add	r7, r0
 800526e:	eba8 0800 	sub.w	r8, r8, r0
 8005272:	e7e7      	b.n	8005244 <__sflush_r+0xd4>
 8005274:	dfbffffe 	.word	0xdfbffffe

08005278 <_fflush_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	690b      	ldr	r3, [r1, #16]
 800527c:	4605      	mov	r5, r0
 800527e:	460c      	mov	r4, r1
 8005280:	b913      	cbnz	r3, 8005288 <_fflush_r+0x10>
 8005282:	2500      	movs	r5, #0
 8005284:	4628      	mov	r0, r5
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	b118      	cbz	r0, 8005292 <_fflush_r+0x1a>
 800528a:	6a03      	ldr	r3, [r0, #32]
 800528c:	b90b      	cbnz	r3, 8005292 <_fflush_r+0x1a>
 800528e:	f7ff f99f 	bl	80045d0 <__sinit>
 8005292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f3      	beq.n	8005282 <_fflush_r+0xa>
 800529a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800529c:	07d0      	lsls	r0, r2, #31
 800529e:	d404      	bmi.n	80052aa <_fflush_r+0x32>
 80052a0:	0599      	lsls	r1, r3, #22
 80052a2:	d402      	bmi.n	80052aa <_fflush_r+0x32>
 80052a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052a6:	f7ff fb8a 	bl	80049be <__retarget_lock_acquire_recursive>
 80052aa:	4628      	mov	r0, r5
 80052ac:	4621      	mov	r1, r4
 80052ae:	f7ff ff5f 	bl	8005170 <__sflush_r>
 80052b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052b4:	07da      	lsls	r2, r3, #31
 80052b6:	4605      	mov	r5, r0
 80052b8:	d4e4      	bmi.n	8005284 <_fflush_r+0xc>
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	059b      	lsls	r3, r3, #22
 80052be:	d4e1      	bmi.n	8005284 <_fflush_r+0xc>
 80052c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052c2:	f7ff fb7d 	bl	80049c0 <__retarget_lock_release_recursive>
 80052c6:	e7dd      	b.n	8005284 <_fflush_r+0xc>

080052c8 <__swhatbuf_r>:
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	460c      	mov	r4, r1
 80052cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d0:	2900      	cmp	r1, #0
 80052d2:	b096      	sub	sp, #88	@ 0x58
 80052d4:	4615      	mov	r5, r2
 80052d6:	461e      	mov	r6, r3
 80052d8:	da0d      	bge.n	80052f6 <__swhatbuf_r+0x2e>
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	bf14      	ite	ne
 80052e6:	2340      	movne	r3, #64	@ 0x40
 80052e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052ec:	2000      	movs	r0, #0
 80052ee:	6031      	str	r1, [r6, #0]
 80052f0:	602b      	str	r3, [r5, #0]
 80052f2:	b016      	add	sp, #88	@ 0x58
 80052f4:	bd70      	pop	{r4, r5, r6, pc}
 80052f6:	466a      	mov	r2, sp
 80052f8:	f000 f848 	bl	800538c <_fstat_r>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	dbec      	blt.n	80052da <__swhatbuf_r+0x12>
 8005300:	9901      	ldr	r1, [sp, #4]
 8005302:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005306:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800530a:	4259      	negs	r1, r3
 800530c:	4159      	adcs	r1, r3
 800530e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005312:	e7eb      	b.n	80052ec <__swhatbuf_r+0x24>

08005314 <__smakebuf_r>:
 8005314:	898b      	ldrh	r3, [r1, #12]
 8005316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005318:	079d      	lsls	r5, r3, #30
 800531a:	4606      	mov	r6, r0
 800531c:	460c      	mov	r4, r1
 800531e:	d507      	bpl.n	8005330 <__smakebuf_r+0x1c>
 8005320:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	6123      	str	r3, [r4, #16]
 8005328:	2301      	movs	r3, #1
 800532a:	6163      	str	r3, [r4, #20]
 800532c:	b003      	add	sp, #12
 800532e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005330:	ab01      	add	r3, sp, #4
 8005332:	466a      	mov	r2, sp
 8005334:	f7ff ffc8 	bl	80052c8 <__swhatbuf_r>
 8005338:	9f00      	ldr	r7, [sp, #0]
 800533a:	4605      	mov	r5, r0
 800533c:	4639      	mov	r1, r7
 800533e:	4630      	mov	r0, r6
 8005340:	f7ff fbba 	bl	8004ab8 <_malloc_r>
 8005344:	b948      	cbnz	r0, 800535a <__smakebuf_r+0x46>
 8005346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800534a:	059a      	lsls	r2, r3, #22
 800534c:	d4ee      	bmi.n	800532c <__smakebuf_r+0x18>
 800534e:	f023 0303 	bic.w	r3, r3, #3
 8005352:	f043 0302 	orr.w	r3, r3, #2
 8005356:	81a3      	strh	r3, [r4, #12]
 8005358:	e7e2      	b.n	8005320 <__smakebuf_r+0xc>
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	6020      	str	r0, [r4, #0]
 800535e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005362:	81a3      	strh	r3, [r4, #12]
 8005364:	9b01      	ldr	r3, [sp, #4]
 8005366:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800536a:	b15b      	cbz	r3, 8005384 <__smakebuf_r+0x70>
 800536c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005370:	4630      	mov	r0, r6
 8005372:	f000 f81d 	bl	80053b0 <_isatty_r>
 8005376:	b128      	cbz	r0, 8005384 <__smakebuf_r+0x70>
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	f023 0303 	bic.w	r3, r3, #3
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	431d      	orrs	r5, r3
 8005388:	81a5      	strh	r5, [r4, #12]
 800538a:	e7cf      	b.n	800532c <__smakebuf_r+0x18>

0800538c <_fstat_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4d07      	ldr	r5, [pc, #28]	@ (80053ac <_fstat_r+0x20>)
 8005390:	2300      	movs	r3, #0
 8005392:	4604      	mov	r4, r0
 8005394:	4608      	mov	r0, r1
 8005396:	4611      	mov	r1, r2
 8005398:	602b      	str	r3, [r5, #0]
 800539a:	f7fb fb10 	bl	80009be <_fstat>
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	d102      	bne.n	80053a8 <_fstat_r+0x1c>
 80053a2:	682b      	ldr	r3, [r5, #0]
 80053a4:	b103      	cbz	r3, 80053a8 <_fstat_r+0x1c>
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	bd38      	pop	{r3, r4, r5, pc}
 80053aa:	bf00      	nop
 80053ac:	20004b60 	.word	0x20004b60

080053b0 <_isatty_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4d06      	ldr	r5, [pc, #24]	@ (80053cc <_isatty_r+0x1c>)
 80053b4:	2300      	movs	r3, #0
 80053b6:	4604      	mov	r4, r0
 80053b8:	4608      	mov	r0, r1
 80053ba:	602b      	str	r3, [r5, #0]
 80053bc:	f7fb fb0f 	bl	80009de <_isatty>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d102      	bne.n	80053ca <_isatty_r+0x1a>
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	b103      	cbz	r3, 80053ca <_isatty_r+0x1a>
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
 80053cc:	20004b60 	.word	0x20004b60

080053d0 <_sbrk_r>:
 80053d0:	b538      	push	{r3, r4, r5, lr}
 80053d2:	4d06      	ldr	r5, [pc, #24]	@ (80053ec <_sbrk_r+0x1c>)
 80053d4:	2300      	movs	r3, #0
 80053d6:	4604      	mov	r4, r0
 80053d8:	4608      	mov	r0, r1
 80053da:	602b      	str	r3, [r5, #0]
 80053dc:	f7fb fb18 	bl	8000a10 <_sbrk>
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	d102      	bne.n	80053ea <_sbrk_r+0x1a>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	b103      	cbz	r3, 80053ea <_sbrk_r+0x1a>
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	20004b60 	.word	0x20004b60

080053f0 <_init>:
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	bf00      	nop
 80053f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f6:	bc08      	pop	{r3}
 80053f8:	469e      	mov	lr, r3
 80053fa:	4770      	bx	lr

080053fc <_fini>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr
